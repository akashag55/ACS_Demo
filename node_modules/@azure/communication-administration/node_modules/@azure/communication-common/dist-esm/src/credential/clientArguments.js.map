{"version":3,"file":"clientArguments.js","sourceRoot":"","sources":["../../../src/credential/clientArguments.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,iBAAiB,EAAkC,MAAM,kBAAkB,CAAC;AACrF,OAAO,EAAE,UAAU,EAAE,MAAM,kBAAkB,CAAC;AAC9C,OAAO,EAAE,qBAAqB,EAAE,MAAM,oBAAoB,CAAC;AAE3D,MAAM,eAAe,GAAG,CAAC,IAAY,EAAW,EAAE;;IAChD,MAAM,GAAG,GAAG,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAEnC,OAAO,CACL,CAAC,QAAC,GAAG,CAAC,SAAS,EAAE,0CAAE,KAAK,CAAC,WAAW,EAAC;QACrC,GAAG,CAAC,OAAO,EAAE,KAAK,SAAS;QAC3B,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE;QACpB,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,SAAS,IAAI,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI,GAAG,CAAC,OAAO,EAAE,KAAK,GAAG,CAAC,CAC/E,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,mBAAmB,GAAG,CAAC,IAAY,EAAQ,EAAE;IACjD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE;QAC1B,MAAM,IAAI,KAAK,CAAC,wBAAwB,IAAI,EAAE,CAAC,CAAC;KACjD;AACH,CAAC,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,UAAe,EAA+B,EAAE;IAC9E,OAAO,UAAU,IAAI,OAAO,UAAU,CAAC,GAAG,KAAK,QAAQ,IAAI,UAAU,CAAC,QAAQ,KAAK,SAAS,CAAC;AAC/F,CAAC,CAAC;AAUF;;;;;GAKG;AACH,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAClC,qBAA6B,EAC7B,mBAAyB,EACN,EAAE;IACrB,IAAI,eAAe,CAAC,mBAAmB,CAAC,IAAI,iBAAiB,CAAC,mBAAmB,CAAC,EAAE;QAClF,mBAAmB,CAAC,qBAAqB,CAAC,CAAC;QAC3C,OAAO,EAAE,GAAG,EAAE,qBAAqB,EAAE,UAAU,EAAE,mBAAmB,EAAE,CAAC;KACxE;SAAM;QACL,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,GAAG,qBAAqB,CAAC,qBAAqB,CAAC,CAAC;QACpF,mBAAmB,CAAC,IAAI,CAAC,CAAC;QAC1B,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC;KAClC;AACH,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { isTokenCredential, KeyCredential, TokenCredential } from \"@azure/core-auth\";\nimport { URLBuilder } from \"@azure/core-http\";\nimport { parseConnectionString } from \"./connectionString\";\n\nconst isValidEndpoint = (host: string): boolean => {\n  const url = URLBuilder.parse(host);\n\n  return (\n    !!url.getScheme()?.match(/^http[s]?/) &&\n    url.getHost() !== undefined &&\n    url.getHost() !== \"\" &&\n    (url.getPath() === undefined || url.getPath() === \"\" || url.getPath() === \"/\")\n  );\n};\n\nconst assertValidEndpoint = (host: string): void => {\n  if (!isValidEndpoint(host)) {\n    throw new Error(`Invalid endpoint url ${host}`);\n  }\n};\n\n/**\n * Checks whether a value is a KeyCredential.\n *\n * @param {*} credential The credential being checked.\n */\nexport const isKeyCredential = (credential: any): credential is KeyCredential => {\n  return credential && typeof credential.key === \"string\" && credential.getToken === undefined;\n};\n\n/**\n * The URL and credential from parsing the arguments of a communication client.\n */\nexport type UrlWithCredential = {\n  url: string;\n  credential: TokenCredential | KeyCredential;\n};\n\n/**\n * Parses arguments passed to a communication client.\n *\n * @param {string} connectionStringOrUrl\n * @param {*} [credentialOrOptions]\n */\nexport const parseClientArguments = (\n  connectionStringOrUrl: string,\n  credentialOrOptions?: any\n): UrlWithCredential => {\n  if (isKeyCredential(credentialOrOptions) || isTokenCredential(credentialOrOptions)) {\n    assertValidEndpoint(connectionStringOrUrl);\n    return { url: connectionStringOrUrl, credential: credentialOrOptions };\n  } else {\n    const { endpoint: host, credential } = parseConnectionString(connectionStringOrUrl);\n    assertValidEndpoint(host);\n    return { url: host, credential };\n  }\n};\n"]}