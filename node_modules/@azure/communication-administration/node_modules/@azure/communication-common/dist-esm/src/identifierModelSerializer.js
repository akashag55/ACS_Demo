// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { getIdentifierKind } from "./identifierModels";
const addIdIfExisting = (identifier, id) => {
    return id === undefined ? identifier : Object.assign(Object.assign({}, identifier), { id });
};
/**
 * @internal
 * Translates a CommunicationIdentifier to its serialized format for sending a request.
 * @param identifier The CommunicationIdentifier to be serialized.
 */
export const _serializeCommunicationIdentifier = (identifier) => {
    var _a, _b;
    const identifierKind = getIdentifierKind(identifier);
    switch (identifierKind.kind) {
        case "communicationUser":
            return { kind: "communicationUser", id: identifierKind.communicationUserId };
        case "callingApplication":
            return { kind: "callingApplication", id: identifierKind.callingApplicationId };
        case "phoneNumber":
            return addIdIfExisting({ kind: "phoneNumber", phoneNumber: identifierKind.phoneNumber }, identifierKind.id);
        case "microsoftTeamsUser":
            return addIdIfExisting({
                kind: "microsoftTeamsUser",
                microsoftTeamsUserId: identifierKind.microsoftTeamsUserId,
                isAnonymous: (_a = identifierKind.isAnonymous) !== null && _a !== void 0 ? _a : false,
                cloud: (_b = identifierKind.cloud) !== null && _b !== void 0 ? _b : "public"
            }, identifierKind.id);
        case "unknown":
            return { kind: "unknown", id: identifierKind.id };
        default:
            throw new Error(`Can't serialize an identifier with kind ${identifierKind.kind}`);
    }
};
/**
 * @internal
 * Translates the serialized format of a communication identifier to CommunicationIdentifier.
 * @param serializedIdentifier The SerializedCommunicationIdentifier to be deserialized.
 */
export const _deserializeCommunicationIdentifier = (serializedIdentifier) => {
    switch (serializedIdentifier.kind) {
        case "communicationUser":
            return {
                kind: "communicationUser",
                communicationUserId: assertNotNullOrUndefined(serializedIdentifier, "id"),
                id: assertNotNullOrUndefined(serializedIdentifier, "id")
            };
        case "callingApplication":
            return {
                kind: "callingApplication",
                callingApplicationId: assertNotNullOrUndefined(serializedIdentifier, "id"),
                id: assertNotNullOrUndefined(serializedIdentifier, "id")
            };
        case "phoneNumber":
            return {
                kind: "phoneNumber",
                phoneNumber: assertNotNullOrUndefined(serializedIdentifier, "phoneNumber"),
                id: assertNotNullOrUndefined(serializedIdentifier, "id")
            };
        case "microsoftTeamsUser":
            return {
                kind: "microsoftTeamsUser",
                microsoftTeamsUserId: assertNotNullOrUndefined(serializedIdentifier, "microsoftTeamsUserId"),
                isAnonymous: assertNotNullOrUndefined(serializedIdentifier, "isAnonymous"),
                cloud: assertNotNullOrUndefined(serializedIdentifier, "cloud"),
                id: assertNotNullOrUndefined(serializedIdentifier, "id")
            };
        case "unknown":
            return { kind: "unknown", id: assertNotNullOrUndefined(serializedIdentifier, "id") };
        default:
            return { kind: "unknown", id: assertNotNullOrUndefined(serializedIdentifier, "id") };
    }
};
const assertNotNullOrUndefined = (obj, prop) => {
    if (prop in obj) {
        return obj[prop];
    }
    throw new Error(`Property ${prop} is required for identifier of kind ${obj.kind}.`);
};
//# sourceMappingURL=identifierModelSerializer.js.map