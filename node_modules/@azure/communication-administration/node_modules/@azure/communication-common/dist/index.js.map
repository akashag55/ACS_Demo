{"version":3,"file":"index.js","sources":["../src/tokenParser.ts","../src/staticTokenCredential.ts","../src/autoRefreshTokenCredential.ts","../src/communicationTokenCredential.ts","../src/credential/cryptoUtils.ts","../src/credential/communicationAccessKeyCredentialPolicy.ts","../src/credential/communicationAuthPolicy.ts","../src/credential/connectionString.ts","../src/credential/clientArguments.ts","../src/identifierModels.ts","../src/identifierModelSerializer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport jwtDecode from \"jwt-decode\";\nimport { AccessToken } from \"@azure/core-http\";\n\ninterface JwtToken {\n  exp: number;\n}\n\nexport const parseToken = (token: string): AccessToken => {\n  const { exp } = jwtDecode<JwtToken>(token);\n  return {\n    token,\n    expiresOnTimestamp: exp * 1000\n  };\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken } from \"@azure/core-http\";\nimport { TokenCredential } from \"./communicationTokenCredential\";\n\n/**\n * StaticTokenCredential\n */\nexport class StaticTokenCredential implements TokenCredential {\n  constructor(private readonly token: AccessToken) {}\n\n  public async getToken(): Promise<AccessToken> {\n    return this.token;\n  }\n\n  public dispose(): void {\n    /* intentionally empty */\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortSignalLike, AccessToken } from \"@azure/core-http\";\nimport { parseToken } from \"./tokenParser\";\nimport { TokenCredential } from \"./communicationTokenCredential\";\n\n/**\n * Options for auto-refreshing a Communication Token credential.\n */\nexport interface CommunicationTokenRefreshOptions {\n  /**\n   * Function that returns a token acquired from the Communication configuration SDK.\n   */\n  tokenRefresher: (abortSignal?: AbortSignalLike) => Promise<string>;\n\n  /**\n   * Optional token to initialize.\n   */\n  token?: string;\n\n  /**\n   * Indicates whether the token should be proactively renewed prior to expiry or only renew on demand.\n   * By default false.\n   */\n  refreshProactively?: boolean;\n}\n\nconst expiredToken = { token: \"\", expiresOnTimestamp: -10 };\nconst minutesToMs = (minutes: number): number => minutes * 1000 * 60;\nconst defaultRefreshingInterval = minutesToMs(10);\n\nexport class AutoRefreshTokenCredential implements TokenCredential {\n  private readonly refresh: (abortSignal?: AbortSignalLike) => Promise<string>;\n  private readonly refreshProactively: boolean;\n  private readonly refreshingIntervalInMs: number = defaultRefreshingInterval;\n\n  private currentToken: AccessToken;\n  private activeTimeout: ReturnType<typeof setTimeout> | undefined;\n  private activeTokenFetching: Promise<string> | null = null;\n  private activeTokenUpdating: Promise<void> | null = null;\n  private disposed = false;\n\n  constructor(refreshArgs: CommunicationTokenRefreshOptions) {\n    const { tokenRefresher, token, refreshProactively } = refreshArgs;\n\n    this.refresh = tokenRefresher;\n    this.currentToken = token ? parseToken(token) : expiredToken;\n    this.refreshProactively = refreshProactively ?? false;\n\n    if (this.refreshProactively) {\n      this.scheduleRefresh();\n    }\n  }\n\n  public async getToken(abortSignal?: AbortSignalLike): Promise<AccessToken> {\n    if (!this.isCurrentTokenExpiringSoon) {\n      return this.currentToken;\n    }\n\n    const updatePromise = this.updateTokenAndReschedule(abortSignal);\n\n    if (!this.isCurrentTokenValid) {\n      await updatePromise;\n    }\n\n    return this.currentToken;\n  }\n\n  public dispose(): void {\n    this.disposed = true;\n    this.activeTokenFetching = null;\n    this.activeTokenUpdating = null;\n    this.currentToken = expiredToken;\n    if (this.activeTimeout) {\n      clearTimeout(this.activeTimeout);\n    }\n  }\n\n  private async updateTokenAndReschedule(abortSignal?: AbortSignalLike): Promise<void> {\n    if (this.activeTokenUpdating) {\n      return this.activeTokenUpdating;\n    }\n    this.activeTokenUpdating = this.refreshTokenAndReschedule(abortSignal);\n    try {\n      await this.activeTokenUpdating;\n    } finally {\n      this.activeTokenUpdating = null;\n    }\n  }\n\n  private async refreshTokenAndReschedule(abortSignal?: AbortSignalLike): Promise<void> {\n    this.currentToken = await this.refreshToken(abortSignal);\n    if (this.refreshProactively) {\n      this.scheduleRefresh();\n    }\n  }\n\n  private async refreshToken(abortSignal?: AbortSignalLike): Promise<AccessToken> {\n    try {\n      if (!this.activeTokenFetching) {\n        this.activeTokenFetching = this.refresh(abortSignal);\n      }\n      return parseToken(await this.activeTokenFetching);\n    } finally {\n      this.activeTokenFetching = null;\n    }\n  }\n\n  private scheduleRefresh(): void {\n    if (this.disposed) {\n      return;\n    }\n    if (this.activeTimeout) {\n      clearTimeout(this.activeTimeout);\n    }\n    const timespanInMs =\n      this.currentToken.expiresOnTimestamp - Date.now() - this.refreshingIntervalInMs;\n    this.activeTimeout = setTimeout(() => this.updateTokenAndReschedule(), timespanInMs);\n  }\n\n  private get isCurrentTokenValid(): boolean {\n    return this.currentToken && Date.now() < this.currentToken.expiresOnTimestamp;\n  }\n\n  private get isCurrentTokenExpiringSoon(): boolean {\n    return (\n      !this.currentToken ||\n      Date.now() >= this.currentToken.expiresOnTimestamp - this.refreshingIntervalInMs\n    );\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortSignalLike, AccessToken } from \"@azure/core-http\";\nimport { parseToken } from \"./tokenParser\";\nimport { StaticTokenCredential } from \"./staticTokenCredential\";\nimport {\n  AutoRefreshTokenCredential,\n  CommunicationTokenRefreshOptions\n} from \"./autoRefreshTokenCredential\";\n\nexport type TokenCredential = Pick<AzureCommunicationTokenCredential, \"getToken\" | \"dispose\">;\n\n/**\n * The Azure Communication Services token credential.\n */\nexport interface CommunicationTokenCredential {\n  /**\n   * Gets an `AccessToken` for the user. Throws if already disposed.\n   * @param abortSignal An implementation of `AbortSignalLike` to cancel the operation.\n   */\n  getToken(abortSignal?: AbortSignalLike): Promise<AccessToken>;\n  /**\n   * Disposes the CommunicationTokenCredential and cancels any internal auto-refresh operation.\n   */\n  dispose(): void;\n}\n\n/**\n * The CommunicationTokenCredential implementation with support for proactive token refresh.\n */\nexport class AzureCommunicationTokenCredential implements CommunicationTokenCredential {\n  private readonly tokenCredential: TokenCredential;\n  private disposed = false;\n\n  /**\n   * Creates an instance of CommunicationTokenCredential with a static token and no proactive refreshing.\n   * @param token A user access token issued by Communication Services.\n   */\n  constructor(token: string);\n  /**\n   * Creates an instance of CommunicationTokenCredential with a lambda to get a token and options\n   * to configure proactive refreshing.\n   * @param refreshOptions Options to configure refresh and opt-in to proactive refreshing.\n   */\n  constructor(refreshOptions: CommunicationTokenRefreshOptions);\n  constructor(tokenOrRefreshOptions: string | CommunicationTokenRefreshOptions) {\n    if (typeof tokenOrRefreshOptions === \"string\") {\n      this.tokenCredential = new StaticTokenCredential(parseToken(tokenOrRefreshOptions));\n    } else {\n      this.tokenCredential = new AutoRefreshTokenCredential(tokenOrRefreshOptions);\n    }\n  }\n\n  /**\n   * Gets an `AccessToken` for the user. Throws if already disposed.\n   * @param abortSignal An implementation of `AbortSignalLike` to cancel the operation.\n   */\n  public async getToken(abortSignal?: AbortSignalLike): Promise<AccessToken> {\n    this.throwIfDisposed();\n    const token = await this.tokenCredential.getToken(abortSignal);\n    this.throwIfDisposed();\n    return token;\n  }\n\n  /**\n   * Disposes the CommunicationTokenCredential and cancels any internal auto-refresh operation.\n   */\n  public dispose(): void {\n    this.disposed = true;\n    this.tokenCredential.dispose();\n  }\n\n  private throwIfDisposed(): void {\n    if (this.disposed) {\n      throw new Error(\"User credential is disposed\");\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createHash, createHmac } from \"crypto\";\n\nexport const shaHash = async (content: string): Promise<string> =>\n  createHash(\"sha256\")\n    .update(content)\n    .digest(\"base64\");\n\nexport const shaHMAC = async (secret: string, content: string): Promise<string> => {\n  const decodedSecret = Buffer.from(secret, \"base64\");\n\n  return createHmac(\"sha256\", decodedSecret)\n    .update(content)\n    .digest(\"base64\");\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { KeyCredential } from \"@azure/core-auth\";\nimport {\n  URLBuilder,\n  WebResource,\n  isNode,\n  RequestPolicy,\n  RequestPolicyOptionsLike,\n  RequestPolicyFactory,\n  WebResourceLike,\n  HttpOperationResponse,\n  BaseRequestPolicy\n} from \"@azure/core-http\";\nimport { shaHash, shaHMAC } from \"./cryptoUtils\";\n\n/**\n * Creates an HTTP pipeline policy to authenticate a request\n * using an `KeyCredential`\n *\n * @param {KeyCredential} credential The key credential\n */\nexport const createCommunicationAccessKeyCredentialPolicy = (\n  credential: KeyCredential\n): RequestPolicyFactory => {\n  return {\n    create: (nextpolicy: RequestPolicy, options: RequestPolicyOptionsLike) => {\n      return new CommunicationAccessKeyCredentialPolicy(credential, nextpolicy, options);\n    }\n  };\n};\n\n/**\n * CommunicationAccessKeyCredentialPolicy provides a means of signing requests made through\n * the SmsClient.\n */\nclass CommunicationAccessKeyCredentialPolicy extends BaseRequestPolicy {\n  /**\n   * Initializes a new instance of the CommunicationAccessKeyCredential class\n   * using a base64 encoded key.\n   * @param accessKey The base64 encoded key to be used for signing.\n   */\n  constructor(\n    private readonly accessKey: KeyCredential,\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptionsLike\n  ) {\n    super(nextPolicy, options);\n  }\n\n  /**\n   * Signs a request with the provided access key.\n   *\n   * @param {WebResource} webResource The WebResource to be signed.\n   */\n  private async signRequest(webResource: WebResource): Promise<WebResource> {\n    const verb = webResource.method.toUpperCase();\n    const utcNow = new Date().toUTCString();\n    const contentHash = await shaHash(webResource.body || \"\");\n    const dateHeader = isNode ? \"date\" : \"x-ms-date\";\n    const signedHeaders = `${dateHeader};host;x-ms-content-sha256`;\n\n    const url = URLBuilder.parse(webResource.url);\n    const query = url.getQuery();\n    const urlPathAndQuery = query ? `${url.getPath()}?${query}` : url.getPath();\n    const port = url.getPort();\n    const hostAndPort = port ? `${url.getHost()}:${port}` : url.getHost();\n\n    const stringToSign = `${verb}\\n${urlPathAndQuery}\\n${utcNow};${hostAndPort};${contentHash}`;\n    const signature = await shaHMAC(this.accessKey.key, stringToSign);\n\n    if (isNode) {\n      webResource.headers.set(\"Host\", hostAndPort || \"\");\n    }\n\n    webResource.headers.set(dateHeader, utcNow);\n    webResource.headers.set(\"x-ms-content-sha256\", contentHash);\n    webResource.headers.set(\n      \"Authorization\",\n      `HMAC-SHA256 SignedHeaders=${signedHeaders}&Signature=${signature}`\n    );\n\n    return webResource;\n  }\n\n  /**\n   * Signs the request and calls the next policy in the factory.\n   *\n   * @param {WebResourceLike} webResource\n   */\n  public async sendRequest(webResource: WebResourceLike): Promise<HttpOperationResponse> {\n    if (!webResource) {\n      throw new Error(\"webResource cannot be null or undefined\");\n    }\n\n    return this._nextPolicy.sendRequest(await this.signRequest(webResource));\n  }\n}\n","import { isTokenCredential, KeyCredential, TokenCredential } from \"@azure/core-auth\";\nimport { bearerTokenAuthenticationPolicy, RequestPolicyFactory } from \"@azure/core-http\";\nimport { createCommunicationAccessKeyCredentialPolicy } from \"./communicationAccessKeyCredentialPolicy\";\n/**\n * Creates a pipeline policy to authenticate request based\n * on the credential passed in\n *\n * @param {KeyCredential | TokenCredential} credential The key credential\n */\nexport const createCommunicationAuthPolicy = (\n  credential: KeyCredential | TokenCredential\n): RequestPolicyFactory => {\n  if (isTokenCredential(credential)) {\n    return bearerTokenAuthenticationPolicy(credential, \"https://communication.azure.com//.default\");\n  } else {\n    return createCommunicationAccessKeyCredentialPolicy(credential);\n  }\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AzureKeyCredential, KeyCredential } from \"@azure/core-auth\";\n/**\n * Represents different properties of connection string\n * using format \"/endpoint=(.*);accesskey=(.*)\"\n */\nexport interface EndpointCredential {\n  /**\n   * The endpoint as string\n   */\n  endpoint: string;\n  /**\n   * The access key represented as a KeyCredential object\n   */\n  credential: KeyCredential;\n}\n\n// TODO: update when connection string format is finalized\nconst CONNECTION_STRING_REGEX = /endpoint=(.*);accesskey=(.*)/i;\n\nconst tryParseConnectionString = (s: string): EndpointCredential | undefined => {\n  const match = s.match(CONNECTION_STRING_REGEX);\n  if (match?.[1] && match[2]) {\n    return { endpoint: match[1], credential: new AzureKeyCredential(match[2]) };\n  }\n  return undefined;\n};\n/**\n * Returns an EndpointCredential to easily access properties of the connection string\n *\n * @param {string} connectionString The connection string to parse\n * @returns {EndpointCredential} Object to access the endpoint and the credenials\n */\nexport const parseConnectionString = (connectionString: string): EndpointCredential => {\n  const parsedConnectionString = tryParseConnectionString(connectionString);\n  if (parsedConnectionString) {\n    return parsedConnectionString;\n  } else {\n    throw new Error(`Invalid connection string ${connectionString}`);\n  }\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { isTokenCredential, KeyCredential, TokenCredential } from \"@azure/core-auth\";\nimport { URLBuilder } from \"@azure/core-http\";\nimport { parseConnectionString } from \"./connectionString\";\n\nconst isValidEndpoint = (host: string): boolean => {\n  const url = URLBuilder.parse(host);\n\n  return (\n    !!url.getScheme()?.match(/^http[s]?/) &&\n    url.getHost() !== undefined &&\n    url.getHost() !== \"\" &&\n    (url.getPath() === undefined || url.getPath() === \"\" || url.getPath() === \"/\")\n  );\n};\n\nconst assertValidEndpoint = (host: string): void => {\n  if (!isValidEndpoint(host)) {\n    throw new Error(`Invalid endpoint url ${host}`);\n  }\n};\n\n/**\n * Checks whether a value is a KeyCredential.\n *\n * @param {*} credential The credential being checked.\n */\nexport const isKeyCredential = (credential: any): credential is KeyCredential => {\n  return credential && typeof credential.key === \"string\" && credential.getToken === undefined;\n};\n\n/**\n * The URL and credential from parsing the arguments of a communication client.\n */\nexport type UrlWithCredential = {\n  url: string;\n  credential: TokenCredential | KeyCredential;\n};\n\n/**\n * Parses arguments passed to a communication client.\n *\n * @param {string} connectionStringOrUrl\n * @param {*} [credentialOrOptions]\n */\nexport const parseClientArguments = (\n  connectionStringOrUrl: string,\n  credentialOrOptions?: any\n): UrlWithCredential => {\n  if (isKeyCredential(credentialOrOptions) || isTokenCredential(credentialOrOptions)) {\n    assertValidEndpoint(connectionStringOrUrl);\n    return { url: connectionStringOrUrl, credential: credentialOrOptions };\n  } else {\n    const { endpoint: host, credential } = parseConnectionString(connectionStringOrUrl);\n    assertValidEndpoint(host);\n    return { url: host, credential };\n  }\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Identifies a communication participant.\n */\nexport type CommunicationIdentifier =\n  | CommunicationUserIdentifier\n  | PhoneNumberIdentifier\n  | CallingApplicationIdentifier\n  | MicrosoftTeamsUserIdentifier\n  | UnknownIdentifier;\n\nexport interface WithOptionalFullId {\n  /**\n   * Optional full id of the identifier.\n   */\n  id?: string;\n}\n\n/**\n * An Azure Communication user.\n */\nexport interface CommunicationUserIdentifier extends WithOptionalFullId {\n  /**\n   * Id of the CommunicationUser as returned from the Communication Service.\n   */\n  communicationUserId: string;\n}\n\n/**\n * A phone number.\n */\nexport interface PhoneNumberIdentifier extends WithOptionalFullId {\n  /**\n   * The phone number in E.164 format.\n   */\n  phoneNumber: string;\n}\n\n/**\n * A calling application, i.e. a non-human participant in communication.\n */\nexport interface CallingApplicationIdentifier extends WithOptionalFullId {\n  /**\n   * Id of the CallingApplication.\n   */\n  callingApplicationId: string;\n}\n\n/**\n * A Microsoft Teams user.\n */\nexport interface MicrosoftTeamsUserIdentifier extends WithOptionalFullId {\n  /**\n   * Id of the Microsoft Teams user. If the user isn't anonymous, the id is the AAD object id of the user.\n   */\n  microsoftTeamsUserId: string;\n\n  /**\n   * True if the user is anonymous, for example when joining a meeting with a share link. If missing, the user is not anonymous.\n   */\n  isAnonymous?: boolean;\n\n  /**\n   * The cloud that the Microsoft Teams user belongs to. If missing, the cloud is \"public\".\n   */\n  cloud?: \"public\" | \"dod\" | \"gcch\";\n}\n\n/**\n * An unknown identifier that doesn't fit any of the other identifier types.\n */\nexport interface UnknownIdentifier {\n  /**\n   * Id of the UnknownIdentifier.\n   */\n  id: string;\n}\n\n/**\n * Tests an Identifier to determine whether it implements CommunicationUserIdentifier.\n *\n * @param identifier The assumed CommunicationUserIdentifier to be tested.\n */\nexport const isCommunicationUserIdentifier = (\n  identifier: CommunicationIdentifier\n): identifier is CommunicationUserIdentifier => {\n  return typeof (identifier as any).communicationUserId === \"string\";\n};\n\n/**\n * Tests an Identifier to determine whether it implements PhoneNumberIdentifier.\n *\n * @param identifier The assumed PhoneNumberIdentifier to be tested.\n */\nexport const isPhoneNumberIdentifier = (\n  identifier: CommunicationIdentifier\n): identifier is PhoneNumberIdentifier => {\n  return typeof (identifier as any).phoneNumber === \"string\";\n};\n\n/**\n * Tests an Identifier to determine whether it implements MicrosoftTeamsUserIdentifier.\n *\n * @param identifier The assumed available to be tested.\n */\nexport const isMicrosoftTeamsUserIdentifier = (\n  identifier: CommunicationIdentifier\n): identifier is MicrosoftTeamsUserIdentifier => {\n  return typeof (identifier as any).microsoftTeamsUserId === \"string\";\n};\n\n/**\n * Tests an Identifier to determine whether it implements MicrosoftTeamsUserIdentifier.\n *\n * @param identifier The assumed CallingApplicationIdentifier to be tested.\n */\nexport const isCallingApplicationIdentifier = (\n  identifier: CommunicationIdentifier\n): identifier is CallingApplicationIdentifier => {\n  return typeof (identifier as any).callingApplicationId === \"string\";\n};\n\n/**\n * Tests an Identifier to determine whether it implements UnknownIdentifier.\n *\n * @param identifier The assumed UnknownIdentifier to be tested.\n */\nexport const isUnknownIdentifier = (\n  identifier: CommunicationIdentifier\n): identifier is UnknownIdentifier => {\n  return typeof (identifier as any).id === \"string\";\n};\n\n/**\n * The CommunicationIdentifierKind is a discriminated union that adds a property `kind` to an Identifier.\n */\nexport type CommunicationIdentifierKind =\n  | CommunicationUserKind\n  | PhoneNumberKind\n  | CallingApplicationKind\n  | MicrosoftTeamsUserKind\n  | UnknownIdentifierKind;\n\n/**\n * IdentifierKind for a CommunicationUserIdentifier.\n */\nexport interface CommunicationUserKind extends CommunicationUserIdentifier {\n  /**\n   * The identifier kind.\n   */\n  kind: \"communicationUser\";\n}\n\n/**\n * IdentifierKind for a PhoneNumberIdentifier.\n */\nexport interface PhoneNumberKind extends PhoneNumberIdentifier {\n  /**\n   * The identifier kind.\n   */\n  kind: \"phoneNumber\";\n}\n\n/**\n * IdentifierKind for a CallingApplicationIdentifier.\n */\nexport interface CallingApplicationKind extends CallingApplicationIdentifier {\n  /**\n   * The identifier kind.\n   */\n  kind: \"callingApplication\";\n}\n\n/**\n * IdentifierKind for a MicrosoftTeamsUserIdentifier.\n */\nexport interface MicrosoftTeamsUserKind extends MicrosoftTeamsUserIdentifier {\n  /**\n   * The identifier kind.\n   */\n  kind: \"microsoftTeamsUser\";\n}\n\n/**\n * IdentifierKind for UnkownIdentifer.\n */\nexport interface UnknownIdentifierKind extends UnknownIdentifier {\n  /**\n   * The identifier kind.\n   */\n  kind: \"unknown\";\n}\n\n/**\n * Returns the CommunicationIdentifierKind for a given CommunicationIdentifier. Returns undefined if the kind couldn't be inferred.\n *\n * @param identifier The identifier whose kind is to be inferred.\n */\nexport const getIdentifierKind = (\n  identifier: CommunicationIdentifier\n): CommunicationIdentifierKind => {\n  if (isCommunicationUserIdentifier(identifier)) {\n    return { ...identifier, kind: \"communicationUser\" };\n  }\n  if (isPhoneNumberIdentifier(identifier)) {\n    return { ...identifier, kind: \"phoneNumber\" };\n  }\n  if (isCallingApplicationIdentifier(identifier)) {\n    return { ...identifier, kind: \"callingApplication\" };\n  }\n  if (isMicrosoftTeamsUserIdentifier(identifier)) {\n    return { ...identifier, kind: \"microsoftTeamsUser\" };\n  }\n  return { ...identifier, kind: \"unknown\" };\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  CommunicationIdentifier,\n  CommunicationIdentifierKind,\n  getIdentifierKind\n} from \"./identifierModels\";\n\n/**\n * @internal\n * Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user.\n * This interface is the serialized format of a CommunicationIdentifier used in web requests and responses.\n */\nexport interface _SerializedCommunicationIdentifier {\n  /**\n   * Kind of the communication identifier.\n   */\n  kind: _SerializedCommunicationIdentifierKind;\n  /**\n   * Full Id of the identifier.\n   */\n  id?: string;\n  /**\n   * The phone number in E.164 format.\n   */\n  phoneNumber?: string;\n  /**\n   * The AAD object Id of the Microsoft Teams user.\n   */\n  microsoftTeamsUserId?: string;\n  /**\n   * True if the identifier is anonymous.\n   */\n  isAnonymous?: boolean;\n  /**\n   * The cloud that the identifier belongs to.\n   */\n  cloud?: _SerializedCommunicationCloudEnvironment;\n}\n\n/**\n * @internal\n * Defines values for CommunicationIdentifierKind.\n * This type is the serialized format of a CommunicationIdentifier kind used in web requests and responses.\n */\nexport type _SerializedCommunicationIdentifierKind =\n  | \"unknown\"\n  | \"communicationUser\"\n  | \"phoneNumber\"\n  | \"callingApplication\"\n  | \"microsoftTeamsUser\";\n\n/**\n * @internal\n * Defines values for CommunicationCloudEnvironment.\n * This type is the serialized format of the CommunicationCloudEnvironment used in web requests and responses.\n */\nexport type _SerializedCommunicationCloudEnvironment = \"public\" | \"dod\" | \"gcch\";\n\nconst addIdIfExisting = <T>(identifier: T, id: string | undefined): T & { id?: string } => {\n  return id === undefined ? identifier : { ...identifier, id };\n};\n\n/**\n * @internal\n * Translates a CommunicationIdentifier to its serialized format for sending a request.\n * @param identifier The CommunicationIdentifier to be serialized.\n */\nexport const _serializeCommunicationIdentifier = (\n  identifier: CommunicationIdentifier\n): _SerializedCommunicationIdentifier => {\n  const identifierKind = getIdentifierKind(identifier);\n  switch (identifierKind.kind) {\n    case \"communicationUser\":\n      return { kind: \"communicationUser\", id: identifierKind.communicationUserId };\n    case \"callingApplication\":\n      return { kind: \"callingApplication\", id: identifierKind.callingApplicationId };\n    case \"phoneNumber\":\n      return addIdIfExisting(\n        { kind: \"phoneNumber\", phoneNumber: identifierKind.phoneNumber },\n        identifierKind.id\n      );\n    case \"microsoftTeamsUser\":\n      return addIdIfExisting(\n        {\n          kind: \"microsoftTeamsUser\",\n          microsoftTeamsUserId: identifierKind.microsoftTeamsUserId,\n          isAnonymous: identifierKind.isAnonymous ?? false,\n          cloud: identifierKind.cloud ?? \"public\"\n        },\n        identifierKind.id\n      );\n    case \"unknown\":\n      return { kind: \"unknown\", id: identifierKind.id };\n    default:\n      throw new Error(`Can't serialize an identifier with kind ${(identifierKind as any).kind}`);\n  }\n};\n\n/**\n * @internal\n * Translates the serialized format of a communication identifier to CommunicationIdentifier.\n * @param serializedIdentifier The SerializedCommunicationIdentifier to be deserialized.\n */\nexport const _deserializeCommunicationIdentifier = (\n  serializedIdentifier: _SerializedCommunicationIdentifier\n): CommunicationIdentifierKind => {\n  switch (serializedIdentifier.kind) {\n    case \"communicationUser\":\n      return {\n        kind: \"communicationUser\",\n        communicationUserId: assertNotNullOrUndefined(serializedIdentifier, \"id\"),\n        id: assertNotNullOrUndefined(serializedIdentifier, \"id\")\n      };\n    case \"callingApplication\":\n      return {\n        kind: \"callingApplication\",\n        callingApplicationId: assertNotNullOrUndefined(serializedIdentifier, \"id\"),\n        id: assertNotNullOrUndefined(serializedIdentifier, \"id\")\n      };\n    case \"phoneNumber\":\n      return {\n        kind: \"phoneNumber\",\n        phoneNumber: assertNotNullOrUndefined(serializedIdentifier, \"phoneNumber\"),\n        id: assertNotNullOrUndefined(serializedIdentifier, \"id\")\n      };\n    case \"microsoftTeamsUser\":\n      return {\n        kind: \"microsoftTeamsUser\",\n        microsoftTeamsUserId: assertNotNullOrUndefined(\n          serializedIdentifier,\n          \"microsoftTeamsUserId\"\n        ),\n        isAnonymous: assertNotNullOrUndefined(serializedIdentifier, \"isAnonymous\"),\n        cloud: assertNotNullOrUndefined(serializedIdentifier, \"cloud\"),\n        id: assertNotNullOrUndefined(serializedIdentifier, \"id\")\n      };\n    case \"unknown\":\n      return { kind: \"unknown\", id: assertNotNullOrUndefined(serializedIdentifier, \"id\") };\n    default:\n      return { kind: \"unknown\", id: assertNotNullOrUndefined(serializedIdentifier, \"id\") };\n  }\n};\n\nconst assertNotNullOrUndefined = <T extends _SerializedCommunicationIdentifier, P extends keyof T>(\n  obj: T,\n  prop: P\n): Required<T>[P] => {\n  if (prop in obj) {\n    return obj[prop];\n  }\n  throw new Error(`Property ${prop} is required for identifier of kind ${obj.kind}.`);\n};\n"],"names":["createHash","createHmac","BaseRequestPolicy","isNode","URLBuilder","isTokenCredential","bearerTokenAuthenticationPolicy","AzureKeyCredential"],"mappings":"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"}