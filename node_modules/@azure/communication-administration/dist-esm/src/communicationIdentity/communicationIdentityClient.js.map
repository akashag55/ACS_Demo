{"version":3,"file":"communicationIdentityClient.js","sourceRoot":"","sources":["../../../src/communicationIdentity/communicationIdentityClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  createCommunicationAuthPolicy,\n  parseClientArguments,\n  isKeyCredential,\n  CommunicationUserIdentifier\n} from \"@azure/communication-common\";\nimport { isTokenCredential, KeyCredential, TokenCredential } from \"@azure/core-auth\";\nimport {\n  InternalPipelineOptions,\n  createPipelineFromOptions,\n  OperationOptions,\n  operationOptionsToRequestOptionsBase\n} from \"@azure/core-http\";\nimport { CanonicalCode } from \"@opentelemetry/api\";\nimport { CommunicationIdentity, IdentityRestClient } from \"./generated/src/identityRestClient\";\nimport { SDK_VERSION } from \"./constants\";\nimport { logger } from \"../common/logger\";\nimport { createSpan } from \"../common/tracing\";\nimport {\n  CommunicationIdentityOptions,\n  TokenScope,\n  IssueTokenResponse,\n  CreateUserResponse,\n  CommunicationUserToken\n} from \"./models\";\nimport { VoidResponse } from \"../common/models\";\nimport { attachHttpResponse } from \"../common/mappers\";\n\nconst isCommunicationIdentityOptions = (options: any): options is CommunicationIdentityOptions =>\n  options && !isTokenCredential(options) && !isKeyCredential(options);\n\n/**\n * Client class for interacting with Azure Communication Services User Token Management.\n */\nexport class CommunicationIdentityClient {\n  /**\n   * A reference to the auto-generated UserToken HTTP client.\n   */\n  private readonly client: CommunicationIdentity;\n\n  /**\n   * Initializes a new instance of the CommunicationIdentity class.\n   * @param connectionString Connection string to connect to an Azure Communication Service resource.\n   *                         Example: \"endpoint=https://contoso.eastus.communications.azure.net/;accesskey=secret\";\n   * @param options Optional. Options to configure the HTTP pipeline.\n   */\n  public constructor(connectionString: string, options?: CommunicationIdentityOptions);\n\n  /**\n   * Initializes a new instance of the CommunicationIdentity class using an Azure KeyCredential.\n   * @param url The endpoint of the service (ex: https://contoso.eastus.communications.azure.net).\n   * @param credential An object that is used to authenticate requests to the service. Use the AzureKeyCredential or `@azure/identity` to create a credential.\n   * @param options Optional. Options to configure the HTTP pipeline.\n   */\n  public constructor(\n    url: string,\n    credential: KeyCredential,\n    options?: CommunicationIdentityOptions\n  );\n  /**\n   * Initializes a new instance of the CommunicationIdentity class using a TokenCredential.\n   * @param url The endpoint of the service (ex: https://contoso.eastus.communications.azure.net)\n   * @param credential TokenCredential that is used to authenticate requests to the service.\n   * @param options Optional. Options to configure the HTTP pipeline.\n   */\n  public constructor(\n    url: string,\n    credential: TokenCredential,\n    options?: CommunicationIdentityOptions\n  );\n  /**\n   * Creates an instance of CommunicationIdentity.\n   *\n   * @param {string} url The endpoint to the service\n   * @param {KeyCredential} credential An object that is used to authenticate requests to the service. Use the AzureKeyCredential or `@azure/identity` to create a credential.\n   * @param {CommunicationIdentityOptions} [options={}] Options to configure the HTTP pipeline.\n   */\n  public constructor(\n    connectionStringOrUrl: string,\n    credentialOrOptions?: KeyCredential | CommunicationIdentityOptions | TokenCredential,\n    maybeOptions: CommunicationIdentityOptions = {}\n  ) {\n    const { url, credential } = parseClientArguments(connectionStringOrUrl, credentialOrOptions);\n    const options = isCommunicationIdentityOptions(credentialOrOptions)\n      ? credentialOrOptions\n      : maybeOptions;\n    const libInfo = `azsdk-js-communication-administration/${SDK_VERSION}`;\n\n    if (!options.userAgentOptions) {\n      options.userAgentOptions = {};\n    }\n\n    if (options.userAgentOptions.userAgentPrefix) {\n      options.userAgentOptions.userAgentPrefix = `${options.userAgentOptions.userAgentPrefix} ${libInfo}`;\n    } else {\n      options.userAgentOptions.userAgentPrefix = libInfo;\n    }\n\n    const internalPipelineOptions: InternalPipelineOptions = {\n      ...options,\n      ...{\n        loggingOptions: {\n          logger: logger.info\n        }\n      }\n    };\n\n    const authPolicy = createCommunicationAuthPolicy(credential);\n    const pipeline = createPipelineFromOptions(internalPipelineOptions, authPolicy);\n    this.client = new IdentityRestClient(url, pipeline).communicationIdentity;\n  }\n\n  /**\n   * Creates a scoped user token.\n   *\n   * @param {CommunicationUser} user The user whose tokens are being revoked.\n   * @param {TokenScope[]} scopes Scopes to include in the token.\n   * @param {OperationOptions} [options={}] Additional options for the request.\n   */\n  public async issueToken(\n    user: CommunicationUserIdentifier,\n    scopes: TokenScope[],\n    options: OperationOptions = {}\n  ): Promise<IssueTokenResponse> {\n    const { span, updatedOptions } = createSpan(\"CommunicationIdentity-issueToken\", options);\n    try {\n      const { token, id, expiresOn, _response } = await this.client.issueToken(\n        user.communicationUserId,\n        { scopes },\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      const results: CommunicationUserToken = {\n        token,\n        expiresOn,\n        user: { communicationUserId: id }\n      };\n      return attachHttpResponse(results, _response);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Revokes all data and tokens created for a user.\n   *\n   * @param {CommunicationUser} user The user whose tokens are being revoked.\n   * @param {Date} tokensValidFrom Tokens issued before this time will be revoked.\n   * @param {OperationOptions} [options={}] Additional options for the request.\n   */\n  public async revokeTokens(\n    user: CommunicationUserIdentifier,\n    tokensValidFrom: Date = new Date(),\n    options: OperationOptions = {}\n  ): Promise<VoidResponse> {\n    const { span, updatedOptions } = createSpan(\"CommunicationIdentity-revokeTokens\", options);\n    try {\n      const { _response } = await this.client.update(\n        user.communicationUserId,\n        {\n          tokensValidFrom\n        },\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return attachHttpResponse({}, _response);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a single user.\n   *\n   * @param {OperationOptions} [options={}] Additional options for the request.\n   */\n  public async createUser(options: OperationOptions = {}): Promise<CreateUserResponse> {\n    const { span, updatedOptions } = createSpan(\"CommunicationIdentity-createUser\", options);\n    try {\n      const { id, _response } = await this.client.create(\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      const user: CommunicationUserIdentifier = { communicationUserId: id };\n      return attachHttpResponse(user, _response);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Triggers revocation event for user and deletes all its data.\n   *\n   * @param {CommunicationUser} user The user being deleted.\n   * @param {OperationOptions} [options={}] Additional options for the request.\n   */\n  public async deleteUser(\n    user: CommunicationUserIdentifier,\n    options: OperationOptions = {}\n  ): Promise<VoidResponse> {\n    const { span, updatedOptions } = createSpan(\"CommunicationIdentity-deleteUser\", options);\n    try {\n      const { _response } = await this.client.delete(\n        user.communicationUserId,\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return attachHttpResponse({}, _response);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n\nexport { CommunicationTokenRequest, CommunicationIdentityToken } from \"./generated/src/models\";\n"]}