/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/**
 * Class representing a CommunicationIdentity.
 */
export class CommunicationIdentity {
    /**
     * Initialize a new instance of the class CommunicationIdentity class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Create a new identity.
     * @param options The options parameters.
     */
    create(options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ options: operationOptions }, createOperationSpec);
    }
    /**
     * Delete the identity, revoke all tokens of the identity and delete all associated data.
     * @param id Identifier of the identity to be deleted.
     * @param options The options parameters.
     */
    delete(id, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ id, options: operationOptions }, deleteOperationSpec);
    }
    /**
     * Update an Identity.
     * @param id Identifier of the identity.
     * @param body The properties of the identity to be updated.
     * @param options The options parameters.
     */
    update(id, body, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ id, body, options: operationOptions }, updateOperationSpec);
    }
    /**
     * Generate a new token for an identity.
     * @param id Identifier of the identity to issue token for.
     * @param body Requesting scopes for the new token.
     * @param options The options parameters.
     */
    issueToken(id, body, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ id, body, options: operationOptions }, issueTokenOperationSpec);
    }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);
const createOperationSpec = {
    path: "/identities",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.CommunicationIdentity
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint],
    serializer
};
const deleteOperationSpec = {
    path: "/identities/{id}",
    httpMethod: "DELETE",
    responses: { 204: {} },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.id],
    serializer
};
const updateOperationSpec = {
    path: "/identities/{id}",
    httpMethod: "PATCH",
    responses: { 204: {} },
    requestBody: Parameters.body,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.id],
    headerParameters: [Parameters.contentType],
    mediaType: "json",
    serializer
};
const issueTokenOperationSpec = {
    path: "/identities/{id}/token",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.CommunicationIdentityToken
        }
    },
    requestBody: Parameters.body1,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.id],
    headerParameters: [Parameters.contentType1],
    mediaType: "json",
    serializer
};
//# sourceMappingURL=communicationIdentity.js.map