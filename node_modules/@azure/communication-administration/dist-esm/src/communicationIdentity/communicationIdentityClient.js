// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { __awaiter } from "tslib";
import { createCommunicationAuthPolicy, parseClientArguments, isKeyCredential } from "@azure/communication-common";
import { isTokenCredential } from "@azure/core-auth";
import { createPipelineFromOptions, operationOptionsToRequestOptionsBase } from "@azure/core-http";
import { CanonicalCode } from "@opentelemetry/api";
import { IdentityRestClient } from "./generated/src/identityRestClient";
import { SDK_VERSION } from "./constants";
import { logger } from "../common/logger";
import { createSpan } from "../common/tracing";
import { attachHttpResponse } from "../common/mappers";
const isCommunicationIdentityOptions = (options) => options && !isTokenCredential(options) && !isKeyCredential(options);
/**
 * Client class for interacting with Azure Communication Services User Token Management.
 */
export class CommunicationIdentityClient {
    /**
     * Creates an instance of CommunicationIdentity.
     *
     * @param {string} url The endpoint to the service
     * @param {KeyCredential} credential An object that is used to authenticate requests to the service. Use the AzureKeyCredential or `@azure/identity` to create a credential.
     * @param {CommunicationIdentityOptions} [options={}] Options to configure the HTTP pipeline.
     */
    constructor(connectionStringOrUrl, credentialOrOptions, maybeOptions = {}) {
        const { url, credential } = parseClientArguments(connectionStringOrUrl, credentialOrOptions);
        const options = isCommunicationIdentityOptions(credentialOrOptions)
            ? credentialOrOptions
            : maybeOptions;
        const libInfo = `azsdk-js-communication-administration/${SDK_VERSION}`;
        if (!options.userAgentOptions) {
            options.userAgentOptions = {};
        }
        if (options.userAgentOptions.userAgentPrefix) {
            options.userAgentOptions.userAgentPrefix = `${options.userAgentOptions.userAgentPrefix} ${libInfo}`;
        }
        else {
            options.userAgentOptions.userAgentPrefix = libInfo;
        }
        const internalPipelineOptions = Object.assign(Object.assign({}, options), {
            loggingOptions: {
                logger: logger.info
            }
        });
        const authPolicy = createCommunicationAuthPolicy(credential);
        const pipeline = createPipelineFromOptions(internalPipelineOptions, authPolicy);
        this.client = new IdentityRestClient(url, pipeline).communicationIdentity;
    }
    /**
     * Creates a scoped user token.
     *
     * @param {CommunicationUser} user The user whose tokens are being revoked.
     * @param {TokenScope[]} scopes Scopes to include in the token.
     * @param {OperationOptions} [options={}] Additional options for the request.
     */
    issueToken(user, scopes, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { span, updatedOptions } = createSpan("CommunicationIdentity-issueToken", options);
            try {
                const { token, id, expiresOn, _response } = yield this.client.issueToken(user.communicationUserId, { scopes }, operationOptionsToRequestOptionsBase(updatedOptions));
                const results = {
                    token,
                    expiresOn,
                    user: { communicationUserId: id }
                };
                return attachHttpResponse(results, _response);
            }
            catch (e) {
                span.setStatus({
                    code: CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Revokes all data and tokens created for a user.
     *
     * @param {CommunicationUser} user The user whose tokens are being revoked.
     * @param {Date} tokensValidFrom Tokens issued before this time will be revoked.
     * @param {OperationOptions} [options={}] Additional options for the request.
     */
    revokeTokens(user, tokensValidFrom = new Date(), options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { span, updatedOptions } = createSpan("CommunicationIdentity-revokeTokens", options);
            try {
                const { _response } = yield this.client.update(user.communicationUserId, {
                    tokensValidFrom
                }, operationOptionsToRequestOptionsBase(updatedOptions));
                return attachHttpResponse({}, _response);
            }
            catch (e) {
                span.setStatus({
                    code: CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Creates a single user.
     *
     * @param {OperationOptions} [options={}] Additional options for the request.
     */
    createUser(options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { span, updatedOptions } = createSpan("CommunicationIdentity-createUser", options);
            try {
                const { id, _response } = yield this.client.create(operationOptionsToRequestOptionsBase(updatedOptions));
                const user = { communicationUserId: id };
                return attachHttpResponse(user, _response);
            }
            catch (e) {
                span.setStatus({
                    code: CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Triggers revocation event for user and deletes all its data.
     *
     * @param {CommunicationUser} user The user being deleted.
     * @param {OperationOptions} [options={}] Additional options for the request.
     */
    deleteUser(user, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { span, updatedOptions } = createSpan("CommunicationIdentity-deleteUser", options);
            try {
                const { _response } = yield this.client.delete(user.communicationUserId, operationOptionsToRequestOptionsBase(updatedOptions));
                return attachHttpResponse({}, _response);
            }
            catch (e) {
                span.setStatus({
                    code: CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
}
//# sourceMappingURL=communicationIdentityClient.js.map