{"version":3,"file":"phoneNumberAdministrationClient.js","sourceRoot":"","sources":["../../../src/phoneNumber/phoneNumberAdministrationClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/// <reference lib=\"esnext.asynciterable\" />\n\nimport {\n  parseClientArguments,\n  isKeyCredential,\n  createCommunicationAuthPolicy\n} from \"@azure/communication-common\";\nimport { KeyCredential, TokenCredential } from \"@azure/core-auth\";\nimport {\n  PipelineOptions,\n  InternalPipelineOptions,\n  createPipelineFromOptions,\n  operationOptionsToRequestOptionsBase\n} from \"@azure/core-http\";\nimport \"@azure/core-paging\";\nimport { PageSettings, PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { CanonicalCode } from \"@opentelemetry/api\";\nimport { logger } from \"../common/logger\";\nimport { createSpan } from \"../common/tracing\";\nimport {\n  PhoneNumberRestClient,\n  PhoneNumberAdministration\n} from \"./generated/src/phoneNumberRestClient\";\nimport {\n  AcquiredPhoneNumber,\n  PhoneNumberCountry,\n  PhonePlanGroup,\n  PhonePlan,\n  PhoneNumberEntity,\n  UpdatePhoneNumberCapabilitiesResponse,\n  UpdateNumberCapabilitiesResponse,\n  PhoneNumberRelease,\n  AreaCodes,\n  NumberConfigurationResponse,\n  LocationOptionsResponse,\n  PhoneNumberReservation\n} from \"./generated/src/models\";\nimport { SDK_VERSION } from \"./constants\";\nimport {\n  GetAreaCodesOptions,\n  ConfigurePhoneNumberOptions,\n  ListSupportedCountriesOptions,\n  ListPhoneNumbersOptions,\n  ListPhonePlanGroupsOptions,\n  UpdateCapabilitiesOptions,\n  GetAreaCodesRequest,\n  PageableOptions,\n  ListPhonePlansRequest,\n  ListPhonePlansOptions,\n  GetPhonePlanLocationOptionsRequest,\n  GetPhonePlanLocationOptionsOptions,\n  ConfigurePhoneNumberRequest,\n  UpdateNumbersCapabilitiesResponse,\n  PhoneNumberCapabilitiesUpdates,\n  GetCapabilitiesUpdateResponse,\n  GetAreaCodesResponse,\n  GetPhoneNumberConfigurationResponse,\n  GetPhonePlanLocationOptionsResponse,\n  GetCapabilitiesUpdateOptions,\n  GetPhoneNumberConfigurationOptions,\n  UnconfigurePhoneNumberOptions,\n  CreateReservationRequest,\n  GetReservationOptions,\n  GetReservationResponse,\n  CancelReservationOptions\n} from \"./models\";\nimport { VoidResponse } from \"../common/models\";\nimport { attachHttpResponse } from \"../common/mappers\";\nimport {\n  BeginPurchaseReservationOptions,\n  BeginReleasePhoneNumbersOptions,\n  BeginReservePhoneNumbersOptions\n} from \"./lroModels\";\nimport { PollerLike, PollOperationState } from \"@azure/core-lro\";\nimport { ReleasePhoneNumbersPoller } from \"./lro/release/poller\";\nimport { ReservePhoneNumbersPoller } from \"./lro/reserve/poller\";\nimport { PurchaseReservationPoller } from \"./lro/purchase/poller\";\n\n/**\n * Client options used to configure the UserTokenClient API requests.\n */\nexport interface PhoneNumberAdministrationClientOptions extends PipelineOptions {}\n\nconst isPhoneNumberAdministrationClientOptions = (\n  options: any\n): options is PhoneNumberAdministrationClientOptions => options && !isKeyCredential(options);\n\n/**\n * Client class for interacting with Azure Communication Services PhoneNumber Administration.\n */\nexport class PhoneNumberAdministrationClient {\n  /**\n   * A reference to the auto-generated PhoneNumber HTTP client.\n   */\n  private readonly client: PhoneNumberAdministration;\n\n  /**\n   * Initializes a new instance of the PhoneNumberAdministrationClient class.\n   * @param connectionString Connection string to connect to an Azure Communication Service resource.\n   *                         Example: \"endpoint=https://contoso.eastus.communications.azure.net/;accesskey=secret\";\n   * @param options Optional. Options to configure the HTTP pipeline.\n   */\n  public constructor(connectionString: string, options?: PhoneNumberAdministrationClientOptions);\n\n  /**\n   * Initializes a new instance of the PhoneNumberAdministrationClient class using an Azure KeyCredential.\n   * @param url The endpoint of the service (ex: https://contoso.eastus.communications.azure.net).\n   * @param credential An object that is used to authenticate requests to the service. Use the Azure KeyCredential or `@azure/identity` to create a credential.\n   * @param options Optional. Options to configure the HTTP pipeline.\n   */\n  public constructor(\n    url: string,\n    credential: KeyCredential,\n    options?: PhoneNumberAdministrationClientOptions\n  );\n\n  /**\n   * Initializes a new instance of the PhoneNumberAdministrationClient class using a TokenCredential.\n   * @param url The endpoint of the service (ex: https://contoso.eastus.communications.azure.net).\n   * @param credential TokenCredential that is used to authenticate requests to the service.\n   * @param options Optional. Options to configure the HTTP pipeline.\n   */\n  public constructor(\n    url: string,\n    credential: TokenCredential,\n    options?: PhoneNumberAdministrationClientOptions\n  );\n\n  public constructor(\n    connectionStringOrUrl: string,\n    credentialOrOptions?: KeyCredential | TokenCredential | PhoneNumberAdministrationClientOptions,\n    maybeOptions: PhoneNumberAdministrationClientOptions = {}\n  ) {\n    const { url, credential } = parseClientArguments(connectionStringOrUrl, credentialOrOptions);\n    const options = isPhoneNumberAdministrationClientOptions(credentialOrOptions)\n      ? credentialOrOptions\n      : maybeOptions;\n    const libInfo = `azsdk-js-communication-administration/${SDK_VERSION}`;\n\n    if (!options.userAgentOptions) {\n      options.userAgentOptions = {};\n    }\n\n    if (options.userAgentOptions.userAgentPrefix) {\n      options.userAgentOptions.userAgentPrefix = `${options.userAgentOptions.userAgentPrefix} ${libInfo}`;\n    } else {\n      options.userAgentOptions.userAgentPrefix = libInfo;\n    }\n\n    const internalPipelineOptions: InternalPipelineOptions = {\n      ...options,\n      ...{\n        loggingOptions: {\n          logger: logger.info\n        }\n      }\n    };\n\n    const authPolicy = createCommunicationAuthPolicy(credential);\n    const pipeline = createPipelineFromOptions(internalPipelineOptions, authPolicy);\n    this.client = new PhoneNumberRestClient(url, pipeline).phoneNumberAdministration;\n  }\n\n  /**\n   * Configures a phone number, for example to assign a callbackUrl.\n   * @param config The configuration details\n   * @param options Additional request options.\n   */\n  public async configurePhoneNumber(\n    config: ConfigurePhoneNumberRequest,\n    options: ConfigurePhoneNumberOptions = {}\n  ): Promise<VoidResponse> {\n    const { span, updatedOptions } = createSpan(\n      \"PhoneNumberAdministrationClient-configurePhoneNumber\",\n      options\n    );\n    const { phoneNumber, callbackUrl } = config;\n    try {\n      const { _response } = await this.client.configureNumber(\n        {\n          phoneNumber,\n          pstnConfiguration: {\n            callbackUrl: callbackUrl,\n            applicationId: updatedOptions.applicationId\n          }\n        },\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return attachHttpResponse({}, _response);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Unconfigure a phone number, resetting its' configuration.\n   * @param phoneNumber Phone Number to unconfigure.\n   * @param options Additional request options.\n   */\n  public async unconfigurePhoneNumber(\n    phoneNumber: string,\n    options: UnconfigurePhoneNumberOptions = {}\n  ): Promise<VoidResponse> {\n    const { span, updatedOptions } = createSpan(\n      \"PhoneNumberAdministrationClient-unconfigurePhoneNumber\",\n      options\n    );\n    try {\n      const { _response } = await this.client.unconfigureNumber(\n        { phoneNumber },\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return attachHttpResponse({}, _response);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Updates the capabilities for a list of phone numbers.\n   * The response includes the id of the created update capabilities request,\n   * remember that id for subsequent calls to getCapabilitiesUpdate.\n   * @param phoneNumberCapabilitiesUpdates Dictionary containing a list of phone numbers and their capabilities updates.\n   * @param options Additional request options.\n   */\n  public async updatePhoneNumbersCapabilities(\n    phoneNumberCapabilitiesUpdates: PhoneNumberCapabilitiesUpdates,\n    options: UpdateCapabilitiesOptions = {}\n  ): Promise<UpdateNumbersCapabilitiesResponse> {\n    const { span, updatedOptions } = createSpan(\n      \"PhoneNumberAdministrationClient-updatePhoneNumbersCapabilities\",\n      options\n    );\n    try {\n      const { capabilitiesUpdateId, _response } = await this.client.updateCapabilities(\n        {\n          phoneNumberCapabilitiesUpdate: phoneNumberCapabilitiesUpdates\n        },\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return attachHttpResponse<UpdateNumberCapabilitiesResponse>(\n        { capabilitiesUpdateId },\n        _response\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Get the update capabilities request associated with a given id.\n   * @param capabilitiesUpdateId  The id associated with the request.\n   * @param options Additional request options.\n   */\n  public async getCapabilitiesUpdate(\n    capabilitiesUpdateId: string,\n    options: GetCapabilitiesUpdateOptions = {}\n  ): Promise<GetCapabilitiesUpdateResponse> {\n    const { span, updatedOptions } = createSpan(\n      \"PhoneNumberAdministrationClient-getCapabilitiesUpdate\",\n      options\n    );\n    try {\n      const { _response, ...rest } = await this.client.getCapabilitiesUpdate(\n        capabilitiesUpdateId,\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return attachHttpResponse<UpdatePhoneNumberCapabilitiesResponse>(rest, _response);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Gets a list of the supported area codes based on location.\n   * @param request Request properties to constraint the search scope.\n   * @param options Additional request options.\n   */\n  public async getAreaCodes(\n    request: GetAreaCodesRequest,\n    options: GetAreaCodesOptions = {}\n  ): Promise<GetAreaCodesResponse> {\n    const { countryCode: country, locationType, phonePlanId, locationOptionsQueries } = request;\n    const { span, updatedOptions } = createSpan(\n      \"PhoneNumberAdministrationClient-getAllAreaCodes\",\n      options\n    );\n    try {\n      const { _response, ...rest } = await this.client.getAllAreaCodes(\n        locationType,\n        country,\n        phonePlanId,\n        locationOptionsQueries,\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return attachHttpResponse<AreaCodes>(rest, _response);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Gets the configuration for a given phone number.\n   * @param phoneNumber The E.164 representation of the phone number whose configuration is requested.\n   * @param options Additional request options.\n   */\n  public async getPhoneNumberConfiguration(\n    phoneNumber: string,\n    options: GetPhoneNumberConfigurationOptions = {}\n  ): Promise<GetPhoneNumberConfigurationResponse> {\n    const { span, updatedOptions } = createSpan(\n      \"PhoneNumberAdministrationClient-getPhoneNumberConfiguration\",\n      options\n    );\n    try {\n      const { pstnConfiguration, _response } = await this.client.getNumberConfiguration(\n        { phoneNumber },\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return attachHttpResponse<NumberConfigurationResponse>({ pstnConfiguration }, _response);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Gets the location options for a given phone plan.\n   * @param request Request properties to constraint the search scope.\n   * @param options Additional request options.\n   */\n  public async getPhonePlanLocationOptions(\n    request: GetPhonePlanLocationOptionsRequest,\n    options: GetPhonePlanLocationOptionsOptions = {}\n  ): Promise<GetPhonePlanLocationOptionsResponse> {\n    const { span, updatedOptions } = createSpan(\n      \"PhoneNumberAdministrationClient-getPhonePlanLocationOptions\",\n      options\n    );\n    const { countryCode, phonePlanGroupId, phonePlanId } = request;\n    try {\n      const { locationOptions, _response } = await this.client.getPhonePlanLocationOptions(\n        countryCode,\n        phonePlanGroupId,\n        phonePlanId,\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return attachHttpResponse<LocationOptionsResponse>({ locationOptions }, _response);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Gets the reservation associated with a given id.\n   * Use this function to query the status of a phone number reservation.\n   * @param reservationId The id of the reservation returned by createReservation.\n   * @param options Additional request options.\n   */\n  public async getReservation(\n    reservationId: string,\n    options: GetReservationOptions = {}\n  ): Promise<GetReservationResponse> {\n    const { span, updatedOptions } = createSpan(\n      \"PhoneNumberAdministrationClient-getReservation\",\n      options\n    );\n    try {\n      const { _response, ...rest } = await this.client.getSearchById(\n        reservationId,\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return attachHttpResponse<PhoneNumberReservation>(rest, _response);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Cancels the reservation associated with a given id.\n   * @param reservationId The id of the reservation returned by createReservation.\n   * @param options Additional request options.\n   */\n  public async cancelReservation(\n    reservationId: string,\n    options: CancelReservationOptions = {}\n  ): Promise<VoidResponse> {\n    const { span, updatedOptions } = createSpan(\n      \"PhoneNumberAdministrationClient-cancelReservation\",\n      options\n    );\n    try {\n      const { _response } = await this.client.cancelSearch(\n        reservationId,\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return attachHttpResponse({}, _response);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Deals with the pagination of listSearches.\n   * @param {PageSettings} continuationState An object that indicates the position of the paginated request.\n   * @param {PageableOptions} [options] Optional parameters for the underlying HTTP request.\n   */\n  private async *listSearchesPage(\n    continuationState: PageSettings,\n    options: PageableOptions = {}\n  ): AsyncIterableIterator<PhoneNumberEntity[]> {\n    if (!continuationState.continuationToken) {\n      const currentResponse = await this.client.getAllSearches(options);\n      continuationState.continuationToken = currentResponse.nextLink;\n\n      if (currentResponse.entities) {\n        yield currentResponse.entities;\n      }\n    }\n\n    while (continuationState.continuationToken) {\n      const currentResponse = await this.client.getAllSearchesNext(\n        continuationState.continuationToken,\n        options\n      );\n      continuationState.continuationToken = currentResponse.nextLink;\n\n      if (currentResponse.entities) {\n        yield currentResponse.entities;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Deals with the iteration of all the available results of listSearches.\n   * @param {PageableOptions} [options] Optional parameters for the underlying HTTP request.\n   */\n  private async *listSearchesAll(\n    options: PageableOptions = {}\n  ): AsyncIterableIterator<PhoneNumberEntity> {\n    for await (const entities of this.listSearchesPage({}, options)) {\n      yield* entities;\n    }\n  }\n\n  /**\n   * Iterates the searches created by the Azure resource.\n   *\n   * Example usage:\n   * ```ts\n   * let client = new PhoneNumberAdministrationClient(credentials);\n   * for await (const entity of client.listSearches()) {\n   *   console.log(\"id: \", entity.id);\n   * }\n   * ```\n   * Gets all searches created by the Azure resource.\n   * @param {PageableOptions} [options] Optional parameters for the underlying HTTP request.\n   */\n  public listSearches(\n    options: PageableOptions = {}\n  ): PagedAsyncIterableIterator<PhoneNumberEntity> {\n    const { span, updatedOptions } = createSpan(\n      \"PhoneNumberAdministrationClient-listSearches\",\n      options\n    );\n    const iter = this.listSearchesAll(options);\n\n    span.end();\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings: PageSettings = {}) => this.listSearchesPage(settings, updatedOptions)\n    };\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Deals with the pagination of listReleases.\n   * @param {PageSettings} continuationState An object that indicates the position of the paginated request.\n   * @param {PageableOptions} [options] Optional parameters for the underlying HTTP request.\n   */\n  private async *listReleasesPage(\n    continuationState: PageSettings,\n    options: PageableOptions = {}\n  ): AsyncIterableIterator<PhoneNumberEntity[]> {\n    if (continuationState.continuationToken == null) {\n      const currentResponse = await this.client.getAllReleases(options);\n      continuationState.continuationToken = currentResponse.nextLink;\n\n      if (currentResponse.entities) {\n        yield currentResponse.entities;\n      }\n    }\n\n    while (continuationState.continuationToken) {\n      const currentResponse = await this.client.getAllReleasesNext(\n        continuationState.continuationToken,\n        options\n      );\n      continuationState.continuationToken = currentResponse.nextLink;\n\n      if (currentResponse.entities) {\n        yield currentResponse.entities;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Deals with the iteration of all the available results of listReleases.\n   * @param {PageableOptions} [options] Optional parameters for the underlying HTTP request.\n   */\n  private async *listReleasesAll(\n    options: PageableOptions = {}\n  ): AsyncIterableIterator<PhoneNumberEntity> {\n    for await (const entities of this.listReleasesPage({}, options)) {\n      yield* entities;\n    }\n  }\n\n  /**\n   * Iterates the releases created by the Azure resource.\n   *\n   * Example usage:\n   * ```ts\n   * let client = new PhoneNumberAdministrationClient(credentials);\n   * for await (const entity of client.listReleases()) {\n   *   console.log(\"id: \", entity.id);\n   * }\n   * ```\n   * Gets all releases created by the Azure resource.\n   * @param {PageableOptions} [options] Optional parameters for the underlying HTTP request.\n   */\n  public listReleases(\n    options: PageableOptions = {}\n  ): PagedAsyncIterableIterator<PhoneNumberEntity> {\n    const { span, updatedOptions } = createSpan(\n      \"PhoneNumberAdministrationClient-listReleases\",\n      options\n    );\n    const iter = this.listReleasesAll(options);\n\n    span.end();\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings: PageSettings = {}) => this.listReleasesPage(settings, updatedOptions)\n    };\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Deals with the pagination of listSupportedCountries.\n   * @param {PageSettings} continuationState An object that indicates the position of the paginated request.\n   * @param {ListSupportedCountriesOptions} [options] Optional parameters for the underlying HTTP request.\n   */\n  private async *listSupportedCountriesPage(\n    continuationState: PageSettings,\n    options: ListSupportedCountriesOptions = {}\n  ): AsyncIterableIterator<PhoneNumberCountry[]> {\n    if (continuationState.continuationToken == null) {\n      const currentResponse = await this.client.getAllSupportedCountries(options);\n      continuationState.continuationToken = currentResponse.nextLink;\n\n      if (currentResponse.countries) {\n        yield currentResponse.countries;\n      }\n    }\n\n    while (continuationState.continuationToken) {\n      const currentResponse = await this.client.getAllSupportedCountriesNext(\n        continuationState.continuationToken,\n        options\n      );\n      continuationState.continuationToken = currentResponse.nextLink;\n\n      if (currentResponse.countries) {\n        yield currentResponse.countries;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Deals with the iteration of all the available results of listSupportedCountries.\n   * @param {ListSupportedCountriesOptions} [options] Optional parameters for the underlying HTTP request.\n   */\n  private async *listSupportedCountriesAll(\n    options: ListSupportedCountriesOptions = {}\n  ): AsyncIterableIterator<PhoneNumberCountry> {\n    for await (const countries of this.listSupportedCountriesPage({}, options)) {\n      yield* countries;\n    }\n  }\n\n  /**\n   * Iterates the supported countries.\n   *\n   * Example usage:\n   * ```ts\n   * let client = new PhoneNumberAdministrationClient(credentials);\n   * for await (const country of client.listSupportedCountries()) {\n   *   console.log(\"country name: \", country.localizedName);\n   * }\n   * ```\n   * @summary List all supported countries.\n   * @param {ListSupportedCountriesOptions} [options] The optional parameters.\n   */\n  public listSupportedCountries(\n    options: ListSupportedCountriesOptions = {}\n  ): PagedAsyncIterableIterator<PhoneNumberCountry> {\n    const { span, updatedOptions } = createSpan(\n      \"PhoneNumberAdministrationClient-listAllSupportedCountries\",\n      options\n    );\n    const iter = this.listSupportedCountriesAll(options);\n\n    span.end();\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings: PageSettings = {}) =>\n        this.listSupportedCountriesPage(settings, updatedOptions)\n    };\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Deals with the pagination of listPhoneNumbers.\n   * @param {PageSettings} continuationState An object that indicates the position of the paginated request.\n   * @param {ListPhoneNumbersOptions} [options] Optional parameters for the underlying HTTP request.\n   */\n  private async *listPhoneNumbersPage(\n    continuationState: PageSettings,\n    options: ListPhoneNumbersOptions = {}\n  ): AsyncIterableIterator<AcquiredPhoneNumber[]> {\n    if (continuationState.continuationToken == null) {\n      const currentResponse = await this.client.getAllPhoneNumbers(options);\n      continuationState.continuationToken = currentResponse.nextLink;\n\n      if (currentResponse.phoneNumbers) {\n        yield currentResponse.phoneNumbers;\n      }\n    }\n\n    while (continuationState.continuationToken) {\n      const currentResponse = await this.client.getAllPhoneNumbersNext(\n        continuationState.continuationToken,\n        options\n      );\n      continuationState.continuationToken = currentResponse.nextLink;\n\n      if (currentResponse.phoneNumbers) {\n        yield currentResponse.phoneNumbers;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Deals with the iteration of all the available results of listPhoneNumbers.\n   * @param {ListPhoneNumbersOptions} [options] Optional parameters for the underlying HTTP request.\n   */\n  private async *listPhoneNumbersAll(\n    options: ListPhoneNumbersOptions = {}\n  ): AsyncIterableIterator<AcquiredPhoneNumber> {\n    for await (const phoneNumbers of this.listPhoneNumbersPage({}, options)) {\n      yield* phoneNumbers;\n    }\n  }\n\n  /**\n   * Iterates the acquired phone numbers.\n   *\n   * Example usage:\n   * ```ts\n   * let client = new PhoneNumberAdministrationClient(credentials);\n   * for await (const acquired of client.listPhoneNumbers()) {\n   *   console.log(\"phone number: \", acquired.phoneNumber);\n   * }\n   * ```\n   * @summary List all acquired phone numbers.\n   * @param {ListPhoneNumbersOptions} [options] The optional parameters.\n   */\n  public listPhoneNumbers(\n    options: ListPhoneNumbersOptions = {}\n  ): PagedAsyncIterableIterator<AcquiredPhoneNumber> {\n    const { span, updatedOptions } = createSpan(\n      \"PhoneNumberAdministrationClient-listAllPhoneNumbers\",\n      options\n    );\n    const iter = this.listPhoneNumbersAll(options);\n\n    span.end();\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings: PageSettings = {}) => this.listPhoneNumbersPage(settings, updatedOptions)\n    };\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Deals with the pagination of listPhonePlanGroups.\n   * @param {PageSettings} continuationState An object that indicates the position of the paginated request.\n   * @param countryCode The ISO 3166-2 country code, for example \"FR\" or \"CN\".\n   * @param {ListPhonePlanGroupsOptions} [options] Optional parameters for the underlying HTTP request.\n   */\n  private async *listPhonePlanGroupsPage(\n    continuationState: PageSettings,\n    countryCode: string,\n    options: ListPhonePlanGroupsOptions = {}\n  ): AsyncIterableIterator<PhonePlanGroup[]> {\n    if (continuationState.continuationToken == null) {\n      const currentResponse = await this.client.getPhonePlanGroups(countryCode, options);\n      continuationState.continuationToken = currentResponse.nextLink;\n\n      if (currentResponse.phonePlanGroups) {\n        yield currentResponse.phonePlanGroups;\n      }\n    }\n\n    while (continuationState.continuationToken) {\n      const currentResponse = await this.client.getPhonePlanGroupsNext(\n        countryCode,\n        continuationState.continuationToken,\n        options\n      );\n      continuationState.continuationToken = currentResponse.nextLink;\n\n      if (currentResponse.phonePlanGroups) {\n        yield currentResponse.phonePlanGroups;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Deals with the iteration of all the available results of listPhonePlanGroups.\n   * @param countryCode The ISO 3166-2 country code, for example \"FR\" or \"CN\".\n   * @param {ListPlansForCountryOptions} [options] Optional parameters for the underlying HTTP request.\n   */\n  private async *listPhonePlanGroupsAll(\n    countryCode: string,\n    options: ListPhonePlanGroupsOptions = {}\n  ): AsyncIterableIterator<PhonePlanGroup> {\n    for await (const phonePlanGroups of this.listPhonePlanGroupsPage({}, countryCode, options)) {\n      yield* phonePlanGroups;\n    }\n  }\n\n  /**\n   * Iterates the available phone plan groups for a country.\n   *\n   * Example usage:\n   * ```ts\n   * let client = new PhoneNumberAdministrationClient(credentials);\n   * for await (const phonePlanGroup of client.listPhonePlanGroups(\"CA\")) {\n   *   console.log(\"plan group id: \", phonePlanGroup.phonePlanGroupId);\n   * }\n   * ```\n   * @summary List all available phone plan groups for a country.\n   * @param {ListPhonePlanGroupsOptions} [options] The optional parameters.\n   */\n  public listPhonePlanGroups(\n    countryCode: string,\n    options: ListPhonePlanGroupsOptions = {}\n  ): PagedAsyncIterableIterator<PhonePlanGroup> {\n    const { span, updatedOptions } = createSpan(\n      \"PhoneNumberAdministrationClient-listPhonePlanGroups\",\n      options\n    );\n    const iter = this.listPhonePlanGroupsAll(countryCode, options);\n\n    span.end();\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings: PageSettings = {}) =>\n        this.listPhonePlanGroupsPage(settings, countryCode, updatedOptions)\n    };\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Deals with the pagination of listPhonePlans.\n   * @param {PageSettings} continuationState An object that indicates the position of the paginated request.\n   * @param planGroupInfo Information need to search for plans.\n   * @param {GetPhonePlansOptions} [options] Optional parameters for the underlying HTTP request.\n   */\n  private async *listPhonePlansPage(\n    continuationState: PageSettings,\n    planGroupInfo: ListPhonePlansRequest,\n    options: ListPhonePlansOptions = {}\n  ): AsyncIterableIterator<PhonePlan[]> {\n    if (continuationState.continuationToken == null) {\n      const currentResponse = await this.client.getPhonePlans(\n        planGroupInfo.countryCode,\n        planGroupInfo.phonePlanGroupId,\n        options\n      );\n      continuationState.continuationToken = currentResponse.nextLink;\n\n      if (currentResponse.phonePlans) {\n        yield currentResponse.phonePlans;\n      }\n    }\n\n    while (continuationState.continuationToken) {\n      const currentResponse = await this.client.getPhonePlansNext(\n        planGroupInfo.countryCode,\n        planGroupInfo.phonePlanGroupId,\n        continuationState.continuationToken,\n        options\n      );\n      continuationState.continuationToken = currentResponse.nextLink;\n\n      if (currentResponse.phonePlans) {\n        yield currentResponse.phonePlans;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   * @ignore\n   * Deals with the iteration of all the available results of listPhonePlans.\n   * @param planGroupInfo Information need to search for plans.\n   * @param {ListPhonePlansOptions} [options] Optional parameters for the underlying HTTP request.\n   */\n  private async *listPhonePlansAll(\n    planGroupInfo: ListPhonePlansRequest,\n    options: ListPhonePlansOptions = {}\n  ): AsyncIterableIterator<PhonePlan> {\n    for await (const phonePlans of this.listPhonePlansPage({}, planGroupInfo, options)) {\n      yield* phonePlans;\n    }\n  }\n\n  /**\n   * Iterates the available phone plan for a plan group.\n   *\n   * Example usage:\n   * ```ts\n   * let client = new PhoneNumberAdministrationClient(credentials);\n   * for await (const phonePlan of client.listPhonePlanGroups(PLAN_GROUP_INFO)) {\n   *   console.log(\"plan id: \", phonePlan.phonePlanId);\n   * }\n   *\n   * Gets all available phone plans for a given plan group.\n   * @param planGroupInfo Information need to search for plans.\n   * @param options Additional request options.\n   */\n  public listPhonePlans(\n    planGroupInfo: ListPhonePlansRequest,\n    options: ListPhonePlansOptions = {}\n  ): PagedAsyncIterableIterator<PhonePlan> {\n    const { span, updatedOptions } = createSpan(\n      \"PhoneNumberAdministrationClient-listPhonePlans\",\n      options\n    );\n    const iter = this.listPhonePlansAll(planGroupInfo, options);\n\n    span.end();\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings: PageSettings = {}) =>\n        this.listPhonePlansPage(settings, planGroupInfo, updatedOptions)\n    };\n  }\n\n  /**\n   * Starts the release of a list of acquired phone numbers.\n   *\n   * This function returns a Long Running Operation poller that allows you to wait indefinitely until the operation is complete.\n   *\n   * Example usage:\n   * ```ts\n   * const client = new PhoneNumberAdministrationClient(CONNECTION_STRING);\n   * const releasePoller = await client.beginReleasePhoneNumbers(PHONE_NUMBERS);\n   *\n   * // Serializing the poller\n   * const serialized = releasePoller.toString();\n   *\n   * // Waiting until it's done\n   * const results = await releasePoller.pollUntilDone();\n   * console.log(results);\n   * ```\n   * @param {string[]} phoneNumbers The phone numbers to be released.\n   * @param {BeginReleasePhoneNumbersOptions} options Additional request options.\n   */\n  public async beginReleasePhoneNumbers(\n    phoneNumbers: string[],\n    options: BeginReleasePhoneNumbersOptions = {}\n  ): Promise<PollerLike<PollOperationState<PhoneNumberRelease>, PhoneNumberRelease>> {\n    const { pollInterval, resumeFrom, ...requestOptions } = options;\n    const poller = new ReleasePhoneNumbersPoller({\n      phoneNumbers,\n      client: this.client,\n      pollInterval,\n      resumeFrom,\n      requestOptions\n    });\n\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Starts a search for phone numbers given some constraints such as name or area code.\n   * The phone numbers that are found are reserved until you cancel, purchase or the reservation expires.\n   *\n   * This function returns a Long Running Operation poller that allows you to wait indefinitely until the operation is complete.\n   *\n   * Example usage:\n   * ```ts\n   * const client = new PhoneNumberAdministrationClient(CONNECTION_STRING);\n   * const reservePoller = await client.beginReservePhoneNumbers(RESERVATION_REQUEST);\n   *\n   * // Serializing the poller\n   * const serialized = reservePoller.toString();\n   *\n   * // Waiting until it's done\n   * const results = await reservePoller.pollUntilDone();\n   * console.log(results);\n   * ```\n   *\n   * @param {CreateReservationRequest} reservationRequest Request properties to constraint the search scope.\n   * @param {BeginReservePhoneNumbersOptions} options Additional request options.\n   */\n  public async beginReservePhoneNumbers(\n    reservationRequest: CreateReservationRequest,\n    options: BeginReservePhoneNumbersOptions = {}\n  ): Promise<PollerLike<PollOperationState<PhoneNumberReservation>, PhoneNumberReservation>> {\n    const { pollInterval, resumeFrom, ...requestOptions } = options;\n    const poller = new ReservePhoneNumbersPoller({\n      reservationRequest,\n      client: this.client,\n      pollInterval,\n      resumeFrom,\n      requestOptions\n    });\n\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Starts the purchase of the phone number(s) in the reservation associated with a given id.\n   *\n   * This function returns a Long Running Operation poller that allows you to wait indefinitely until the operation is complete.\n   *\n   * Example usage:\n   * ```ts\n   * const client = new PhoneNumberAdministrationClient(CONNECTION_STRING);\n   * const purchasePoller = await client.beginPurchaseReservation(RESERVATION_ID);\n   *\n   * // Serializing the poller\n   * const serialized = purchasePoller.toString();\n   *\n   * // Waiting until it's done\n   * const results = await purchasePoller.pollUntilDone();\n   * console.log(results);\n   * ```\n   *\n   * @param {string} reservationId The id of the reservation to purchase.\n   * @param {BeginPurchaseReservationOptions} options Additional request options.\n   */\n  public async beginPurchaseReservation(\n    reservationId: string,\n    options: BeginPurchaseReservationOptions = {}\n  ): Promise<PollerLike<PollOperationState<void>, void>> {\n    const { pollInterval, resumeFrom, ...requestOptions } = options;\n    const poller = new PurchaseReservationPoller({\n      reservationId,\n      client: this.client,\n      pollInterval,\n      resumeFrom,\n      requestOptions\n    });\n\n    await poller.poll();\n    return poller;\n  }\n}\n\nexport {\n  AreaCodes,\n  CarrierDetails,\n  LocationOptions,\n  LocationOptionsDetails,\n  NumberConfiguration,\n  PhoneNumberAdministrationGetAllAreaCodesResponse,\n  PhoneNumberAdministrationReleasePhoneNumbersResponse,\n  PhoneNumberAdministrationGetReleaseByIdResponse,\n  PhoneNumberAdministrationGetCapabilitiesUpdateResponse,\n  PhoneNumberAdministrationGetNumberConfigurationResponse,\n  PhoneNumberAdministrationGetPhonePlanLocationOptionsResponse,\n  PstnConfiguration,\n  ReleaseResponse,\n  NumberUpdateCapabilities,\n  UpdateNumberCapabilitiesResponse,\n  Capability,\n  PhoneNumberCountry,\n  PhoneNumberCountries,\n  LocationOptionsQuery,\n  AcquiredPhoneNumber,\n  AcquiredPhoneNumbers,\n  UpdatePhoneNumberCapabilitiesResponse,\n  PhonePlanGroups,\n  PhonePlanGroup,\n  PhonePlansResponse,\n  PhonePlan,\n  PhoneNumberRelease,\n  PhoneNumberEntities,\n  PhoneNumberReservation,\n  AssignmentStatus,\n  ActivationState,\n  CapabilitiesUpdateStatus,\n  PhoneNumberType,\n  RateInformation,\n  LocationType,\n  ReleaseStatus,\n  PhoneNumberReleaseDetails,\n  PhoneNumberEntity,\n  PhoneNumberReleaseStatus,\n  SearchStatus,\n  LocationOptionsResponse,\n  NumberConfigurationResponse,\n  LocationOptionsQueries\n} from \"./generated/src/models\";\n"]}