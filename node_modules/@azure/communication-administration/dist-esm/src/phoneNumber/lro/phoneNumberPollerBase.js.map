{"version":3,"file":"phoneNumberPollerBase.js","sourceRoot":"","sources":["../../../../src/phoneNumber/lro/phoneNumberPollerBase.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;AAElC,OAAO,EAAE,KAAK,EAAE,oCAAoC,EAAE,MAAM,kBAAkB,CAAC;AAC/E,OAAO,EAAE,MAAM,EAAiB,MAAM,iBAAiB,CAAC;AACxD,OAAO,EAAE,aAAa,EAAE,MAAM,oBAAoB,CAAC;AAEnD,OAAO,EAAE,kBAAkB,EAAE,MAAM,sBAAsB,CAAC;AAC1D,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAKlD;;GAEG;AACH,MAAM,OAAgB,qBAAuC,SAAQ,MAAuB;IAA5F;;QACE;;WAEG;QACI,iBAAY,GAAW,IAAI,CAAC;IAQrC,CAAC;IANC;;OAEG;IACG,KAAK;;YACT,OAAO,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAClC,CAAC;KAAA;CACF;AAED;;GAEG;AACH,MAAM,OAAO,4BAA4B;IAEvC;;;;;OAKG;IACH,YAAmB,KAAa,EAAU,gBAAwB,0BAA0B;QAAzE,UAAK,GAAL,KAAK,CAAQ;QAAU,kBAAa,GAAb,aAAa,CAAqC;IAAG,CAAC;IAEhG;;OAEG;IACU,MAAM;;YACjB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC7C,CAAC;KAAA;IAED;;OAEG;IACU,MAAM;;YACjB,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACtC,CAAC;KAAA;IAED;;OAEG;IACI,QAAQ;QACb,OAAO,IAAI,CAAC,SAAS,CAAC;YACpB,KAAK,EAAE,IAAI,CAAC,KAAK;SAClB,CAAC,CAAC;IACL,CAAC;CACF;AAED;;GAEG;AACH,MAAM,OAAO,uCAAuC;IAElD;;;;;;OAMG;IACH,YACS,KAAa,EACZ,MAAiC,EACjC,gBAAwB,0BAA0B;QAFnD,UAAK,GAAL,KAAK,CAAQ;QACZ,WAAM,GAAN,MAAM,CAA2B;QACjC,kBAAa,GAAb,aAAa,CAAqC;IACzD,CAAC;IAEJ;;;;;OAKG;IACU,cAAc,CACzB,aAAqB,EACrB,UAAiC,EAAE;;YAEnC,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,UAAU,CACzC,gDAAgD,EAChD,OAAO,CACR,CAAC;YACF,IAAI;gBACF,MAAM,KAAyB,MAAM,IAAI,CAAC,MAAM,CAAC,aAAa,CAC5D,aAAa,EACb,oCAAoC,CAAC,cAAc,CAAC,CACrD,EAHK,EAAE,SAAS,OAGhB,EAHqB,IAAI,cAApB,aAAsB,CAG3B,CAAC;gBACF,OAAO,kBAAkB,CAAyB,IAAI,EAAE,SAAS,CAAC,CAAC;aACpE;YAAC,OAAO,CAAC,EAAE;gBACV,IAAI,CAAC,SAAS,CAAC;oBACb,IAAI,EAAE,aAAa,CAAC,OAAO;oBAC3B,OAAO,EAAE,CAAC,CAAC,OAAO;iBACnB,CAAC,CAAC;gBACH,MAAM,CAAC,CAAC;aACT;oBAAS;gBACR,IAAI,CAAC,GAAG,EAAE,CAAC;aACZ;QACH,CAAC;KAAA;IAED;;;;;OAKG;IACU,iBAAiB,CAC5B,aAAqB,EACrB,UAAoC,EAAE;;YAEtC,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,UAAU,CACzC,mDAAmD,EACnD,OAAO,CACR,CAAC;YACF,IAAI;gBACF,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,YAAY,CAClD,aAAa,EACb,oCAAoC,CAAC,cAAc,CAAC,CACrD,CAAC;gBACF,OAAO,kBAAkB,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;aAC1C;YAAC,OAAO,CAAC,EAAE;gBACV,IAAI,CAAC,SAAS,CAAC;oBACb,IAAI,EAAE,aAAa,CAAC,OAAO;oBAC3B,OAAO,EAAE,CAAC,CAAC,OAAO;iBACnB,CAAC,CAAC;gBACH,MAAM,CAAC,CAAC;aACT;oBAAS;gBACR,IAAI,CAAC,GAAG,EAAE,CAAC;aACZ;QACH,CAAC;KAAA;IAED;;OAEG;IACU,MAAM;;YACjB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC7C,CAAC;KAAA;IAED;;OAEG;IACU,MAAM;;YACjB,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACtC,CAAC;KAAA;IAED;;OAEG;IACI,QAAQ;QACb,OAAO,IAAI,CAAC,SAAS,CAAC;YACpB,KAAK,EAAE,IAAI,CAAC,KAAK;SAClB,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { delay, operationOptionsToRequestOptionsBase } from \"@azure/core-http\";\nimport { Poller, PollOperation } from \"@azure/core-lro\";\nimport { CanonicalCode } from \"@opentelemetry/api\";\nimport { VoidResponse } from \"../../common/models\";\nimport { attachHttpResponse } from \"../../common/mappers\";\nimport { createSpan } from \"../../common/tracing\";\nimport { PhoneNumberAdministration } from \"../generated/src/phoneNumberRestClient\";\nimport { CancelReservationOptions, GetReservationOptions, GetReservationResponse } from \"../models\";\nimport { PhoneNumberReservation } from \"../generated/src/models\";\n\n/**\n * Common properties and methods of the phone number pollers.\n */\nexport abstract class PhoneNumberPollerBase<TState, TResult> extends Poller<TState, TResult> {\n  /**\n   * Defines how much time the poller is going to wait before making a new request to the service.\n   */\n  public pollInterval: number = 2000;\n\n  /**\n   * The method used by the poller to wait before attempting to update its operation\n   */\n  async delay(): Promise<void> {\n    return delay(this.pollInterval);\n  }\n}\n\n/**\n * Common properties and methods of the phone number poller operations.\n */\nexport class PhoneNumberPollOperationBase<TState, TResult>\n  implements PollOperation<TState, TResult> {\n  /**\n   * Initializes a new instance of the phone number poll operation\n   *\n   * @param {TState} state The state of the poll operation\n   * @param {string} cancelMessage A message to dispaly when a poll operation is cancelled.\n   */\n  constructor(public state: TState, private cancelMessage: string = \"Canceling not supported.\") {}\n\n  /**\n   * Reaches to the service and updates the Poller operation.\n   */\n  public async update(): Promise<PollOperation<TState, TResult>> {\n    throw new Error(\"Operation not supported\");\n  }\n\n  /**\n   * Reaches to the service and cancels the Poller operation and the underlying request.\n   */\n  public async cancel(): Promise<PollOperation<TState, TResult>> {\n    throw new Error(this.cancelMessage);\n  }\n\n  /**\n   * @summary Serializes the Poller operation.\n   */\n  public toString(): string {\n    return JSON.stringify({\n      state: this.state\n    });\n  }\n}\n\n/**\n * Common properties and methods of the phone number reservation poller operations.\n */\nexport class PhoneNumberReservationPollOperationBase<TState, TResult>\n  implements PollOperation<TState, TResult> {\n  /**\n   * Initializes a new instance of the phone number reservation poll operation\n   *\n   * @param {TState} state The state of the poll operation\n   * @param {PhoneNumberAdministration} client A reference to the generated client used to make requests internally.\n   * @param {string} cancelMessage A message to dispaly when a poll operation is cancelled.\n   */\n  constructor(\n    public state: TState,\n    private client: PhoneNumberAdministration,\n    private cancelMessage: string = \"Canceling not supported.\"\n  ) {}\n\n  /**\n   * Gets the reservation associated with a given id.\n   *\n   * @param {string} reservationId The id of the reservation to fetch.\n   * @param {GetReservationOptions} options Additional request options.\n   */\n  public async getReservation(\n    reservationId: string,\n    options: GetReservationOptions = {}\n  ): Promise<GetReservationResponse> {\n    const { span, updatedOptions } = createSpan(\n      \"PhoneNumberAdministrationClient-getReservation\",\n      options\n    );\n    try {\n      const { _response, ...rest } = await this.client.getSearchById(\n        reservationId,\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return attachHttpResponse<PhoneNumberReservation>(rest, _response);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Cancels the reservation associated with a given id.\n   *\n   * @param {string} reservationId The id of the reservation to cancel.\n   * @param {CancelReservationOptions} options Additional request options.\n   */\n  public async cancelReservation(\n    reservationId: string,\n    options: CancelReservationOptions = {}\n  ): Promise<VoidResponse> {\n    const { span, updatedOptions } = createSpan(\n      \"PhoneNumberAdministrationClient-cancelReservation\",\n      options\n    );\n    try {\n      const { _response } = await this.client.cancelSearch(\n        reservationId,\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return attachHttpResponse({}, _response);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Reaches to the service and updates the Poller operation.\n   */\n  public async update(): Promise<PollOperation<TState, TResult>> {\n    throw new Error(\"Operation not supported\");\n  }\n\n  /**\n   * Reaches to the service and cancels the Poller operation and the underlying request.\n   */\n  public async cancel(): Promise<PollOperation<TState, TResult>> {\n    throw new Error(this.cancelMessage);\n  }\n\n  /**\n   * @summary Serializes the Poller operation.\n   */\n  public toString(): string {\n    return JSON.stringify({\n      state: this.state\n    });\n  }\n}\n"]}