// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { __awaiter } from "tslib";
import { operationOptionsToRequestOptionsBase } from "@azure/core-http";
import { CanonicalCode } from "@opentelemetry/api";
import { attachHttpResponse } from "../../../common/mappers";
import { createSpan } from "../../../common/tracing";
import { PhoneNumberReservationPollOperationBase } from "../phoneNumberPollerBase";
import { isComplete } from "../utils";
/**
 * The poll operation for reserving phone numbers.
 */
export class ReservePhoneNumbersPollOperation extends PhoneNumberReservationPollOperationBase {
    /**
     * Initializes an instance of ReservePhoneNumbersPollOperation
     *
     * @param {PurchaseReservationPollOperationState} state The state of the poll operation
     * @param {PhoneNumberAdministration} _client A reference to the generated client used to make requests internally.
     * @param {OperationOptions} requestOptions Additional options for the underlying requests.
     */
    constructor(state, _client, requestOptions) {
        super(state, _client);
        this.state = state;
        this._client = _client;
        this.requestOptions = requestOptions;
    }
    /**
     * Starts a search for phone numbers given some constraints such as name or area code. The phone numbers that are
     * found will then be reserved.
     *
     * @param {CreateReservationRequest} reservationRequest Request properties to constraint the search scope.
     * @param {CreateReservationOptions} options Additional request options.
     */
    createReservation(reservationRequest, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { name, description, phonePlanIds, areaCode, quantity } = reservationRequest;
            const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-createReservation", options);
            try {
                const { searchId, _response } = yield this._client.createSearch({
                    displayName: name,
                    description,
                    phonePlanIds,
                    quantity,
                    areaCode
                }, operationOptionsToRequestOptionsBase(updatedOptions));
                return attachHttpResponse({ reservationId: searchId }, _response);
            }
            catch (e) {
                span.setStatus({
                    code: CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Reaches to the service and queries the status of the operation.
     *
     * @param {UpdatePollerOptions<ReservePhoneNumbersPollOperationState>} [options={}] Additional options for the poll operation
     */
    update(options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const state = this.state;
            const { reservationRequest } = state;
            if (options.abortSignal) {
                this.requestOptions.abortSignal = options.abortSignal;
            }
            try {
                if (!state.isStarted) {
                    const { reservationId } = yield this.createReservation(reservationRequest, this.requestOptions);
                    state.reservationId = reservationId;
                    state.isStarted = true;
                }
                if (!state.isCompleted && state.reservationId) {
                    state.result = yield this.getReservation(state.reservationId, this.requestOptions);
                    state.isCompleted = isComplete(state.result, "Reserved");
                }
            }
            catch (error) {
                state.error = error;
                state.isCompleted = true;
            }
            finally {
                return this;
            }
        });
    }
    /**
     * Reaches to the service and cancels the operation, also updating the poll operation.
     */
    cancel() {
        return __awaiter(this, void 0, void 0, function* () {
            const state = this.state;
            const { reservationId, options = {} } = state;
            if (reservationId) {
                yield this.cancelReservation(reservationId, options);
            }
            state.isCancelled = true;
            return this;
        });
    }
}
//# sourceMappingURL=operation.js.map