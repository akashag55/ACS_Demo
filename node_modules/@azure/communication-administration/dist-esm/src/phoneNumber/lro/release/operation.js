// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { __awaiter, __rest } from "tslib";
import { operationOptionsToRequestOptionsBase } from "@azure/core-http";
import { CanonicalCode } from "@opentelemetry/api";
import { attachHttpResponse } from "../../../common/mappers";
import { createSpan } from "../../../common/tracing";
import { PhoneNumberPollOperationBase } from "../phoneNumberPollerBase";
import { isComplete } from "../utils";
/**
 * The poll operation for releasing a phone number or list of phone numbers.
 */
export class ReleasePhoneNumbersPollOperation extends PhoneNumberPollOperationBase {
    /**
     * Initializes an instance of PurchaseReservationPollOperation
     *
     * @param {ReleasePhoneNumbersPollOperationState} state The state of the poll operation
     * @param {PhoneNumberAdministration} client A reference to the generated client used to make requests internally.
     * @param {OperationOptions} requestOptions Additional options for the underlying requests.
     */
    constructor(state, client, requestOptions) {
        super(state, "Canceling a release is not supported.");
        this.state = state;
        this.client = client;
        this.requestOptions = requestOptions;
    }
    /**
     * Request the release of a list of acquired phone numbers.
     *
     * @param {string[]} phoneNumbers The phone numbers to be released.
     * @param {ReleasePhoneNumbersOptions} options Additional request options.
     */
    releasePhoneNumbers(phoneNumbers, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-releasePhoneNumbers", options);
            try {
                const { releaseId, _response } = yield this.client.releasePhoneNumbers({
                    phoneNumbers
                }, operationOptionsToRequestOptionsBase(updatedOptions));
                return attachHttpResponse({ releaseId }, _response);
            }
            catch (e) {
                span.setStatus({
                    code: CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Gets the release associated with a given id.
     *
     * @param {string} releaseId The id of the release returned by releasePhoneNumbers.
     * @param {GetReleaseOptions} options Additional request options.
     */
    getRelease(releaseId, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-getRelease", options);
            try {
                const _a = yield this.client.getReleaseById(releaseId, operationOptionsToRequestOptionsBase(updatedOptions)), { _response } = _a, rest = __rest(_a, ["_response"]);
                return attachHttpResponse(rest, _response);
            }
            catch (e) {
                span.setStatus({
                    code: CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Reaches to the service and queries the status of the operation.
     *
     * @param {UpdatePollerOptions<ReleasePhoneNumbersPollOperationState>} [options={}] Additional options for the poll operation
     */
    update(options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { state } = this;
            const { phoneNumbers } = state;
            if (options.abortSignal) {
                this.requestOptions.abortSignal = options.abortSignal;
            }
            try {
                if (!state.isStarted) {
                    const { releaseId } = yield this.releasePhoneNumbers(phoneNumbers, this.requestOptions);
                    state.releaseId = releaseId;
                    state.isStarted = true;
                }
                if (!state.isCompleted && state.releaseId) {
                    state.result = yield this.getRelease(state.releaseId, this.requestOptions);
                    state.isCompleted = isComplete(state.result, "Complete");
                }
            }
            catch (error) {
                state.error = error;
                state.isCompleted = true;
            }
            finally {
                return this;
            }
        });
    }
}
//# sourceMappingURL=operation.js.map