{"version":3,"file":"operation.js","sourceRoot":"","sources":["../../../../../src/phoneNumber/lro/release/operation.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { OperationOptions, operationOptionsToRequestOptionsBase } from \"@azure/core-http\";\nimport { CanonicalCode } from \"@opentelemetry/api\";\nimport {\n  GetReleaseOptions,\n  GetReleaseResponse,\n  ReleasePhoneNumbersOptions,\n  ReleasePhoneNumbersResponse\n} from \"../../models\";\nimport { attachHttpResponse } from \"../../../common/mappers\";\nimport { createSpan } from \"../../../common/tracing\";\nimport { PhoneNumberRelease, ReleaseResponse } from \"../../generated/src/models\";\nimport { PhoneNumberAdministration } from \"../../generated/src/phoneNumberRestClient\";\nimport { ReleasePhoneNumbersPollOperationState, UpdatePollerOptions } from \"../../lroModels\";\nimport { PhoneNumberPollOperationBase } from \"../phoneNumberPollerBase\";\nimport { isComplete } from \"../utils\";\n\n/**\n * The poll operation for releasing a phone number or list of phone numbers.\n */\nexport class ReleasePhoneNumbersPollOperation extends PhoneNumberPollOperationBase<\n  ReleasePhoneNumbersPollOperationState,\n  PhoneNumberRelease\n> {\n  /**\n   * Initializes an instance of PurchaseReservationPollOperation\n   *\n   * @param {ReleasePhoneNumbersPollOperationState} state The state of the poll operation\n   * @param {PhoneNumberAdministration} client A reference to the generated client used to make requests internally.\n   * @param {OperationOptions} requestOptions Additional options for the underlying requests.\n   */\n  constructor(\n    public state: ReleasePhoneNumbersPollOperationState,\n    private client: PhoneNumberAdministration,\n    private requestOptions: OperationOptions\n  ) {\n    super(state, \"Canceling a release is not supported.\");\n  }\n\n  /**\n   * Request the release of a list of acquired phone numbers.\n   *\n   * @param {string[]} phoneNumbers The phone numbers to be released.\n   * @param {ReleasePhoneNumbersOptions} options Additional request options.\n   */\n  private async releasePhoneNumbers(\n    phoneNumbers: string[],\n    options: ReleasePhoneNumbersOptions = {}\n  ): Promise<ReleasePhoneNumbersResponse> {\n    const { span, updatedOptions } = createSpan(\n      \"PhoneNumberAdministrationClient-releasePhoneNumbers\",\n      options\n    );\n    try {\n      const { releaseId, _response } = await this.client.releasePhoneNumbers(\n        {\n          phoneNumbers\n        },\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return attachHttpResponse<ReleaseResponse>({ releaseId }, _response);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Gets the release associated with a given id.\n   *\n   * @param {string} releaseId The id of the release returned by releasePhoneNumbers.\n   * @param {GetReleaseOptions} options Additional request options.\n   */\n  private async getRelease(\n    releaseId: string,\n    options: GetReleaseOptions = {}\n  ): Promise<GetReleaseResponse> {\n    const { span, updatedOptions } = createSpan(\n      \"PhoneNumberAdministrationClient-getRelease\",\n      options\n    );\n    try {\n      const { _response, ...rest } = await this.client.getReleaseById(\n        releaseId,\n        operationOptionsToRequestOptionsBase(updatedOptions)\n      );\n      return attachHttpResponse<PhoneNumberRelease>(rest, _response);\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Reaches to the service and queries the status of the operation.\n   *\n   * @param {UpdatePollerOptions<ReleasePhoneNumbersPollOperationState>} [options={}] Additional options for the poll operation\n   */\n  public async update(\n    options: UpdatePollerOptions<ReleasePhoneNumbersPollOperationState> = {}\n  ): Promise<ReleasePhoneNumbersPollOperation> {\n    const { state } = this;\n    const { phoneNumbers } = state;\n\n    if (options.abortSignal) {\n      this.requestOptions.abortSignal = options.abortSignal;\n    }\n\n    try {\n      if (!state.isStarted) {\n        const { releaseId } = await this.releasePhoneNumbers(phoneNumbers, this.requestOptions);\n        state.releaseId = releaseId;\n        state.isStarted = true;\n      }\n\n      if (!state.isCompleted && state.releaseId) {\n        state.result = await this.getRelease(state.releaseId, this.requestOptions);\n        state.isCompleted = isComplete(state.result, \"Complete\");\n      }\n    } catch (error) {\n      state.error = error;\n      state.isCompleted = true;\n    } finally {\n      return this;\n    }\n  }\n}\n"]}