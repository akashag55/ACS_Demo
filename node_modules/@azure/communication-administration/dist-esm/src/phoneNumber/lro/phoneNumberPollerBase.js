// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { __awaiter, __rest } from "tslib";
import { delay, operationOptionsToRequestOptionsBase } from "@azure/core-http";
import { Poller } from "@azure/core-lro";
import { CanonicalCode } from "@opentelemetry/api";
import { attachHttpResponse } from "../../common/mappers";
import { createSpan } from "../../common/tracing";
/**
 * Common properties and methods of the phone number pollers.
 */
export class PhoneNumberPollerBase extends Poller {
    constructor() {
        super(...arguments);
        /**
         * Defines how much time the poller is going to wait before making a new request to the service.
         */
        this.pollInterval = 2000;
    }
    /**
     * The method used by the poller to wait before attempting to update its operation
     */
    delay() {
        return __awaiter(this, void 0, void 0, function* () {
            return delay(this.pollInterval);
        });
    }
}
/**
 * Common properties and methods of the phone number poller operations.
 */
export class PhoneNumberPollOperationBase {
    /**
     * Initializes a new instance of the phone number poll operation
     *
     * @param {TState} state The state of the poll operation
     * @param {string} cancelMessage A message to dispaly when a poll operation is cancelled.
     */
    constructor(state, cancelMessage = "Canceling not supported.") {
        this.state = state;
        this.cancelMessage = cancelMessage;
    }
    /**
     * Reaches to the service and updates the Poller operation.
     */
    update() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error("Operation not supported");
        });
    }
    /**
     * Reaches to the service and cancels the Poller operation and the underlying request.
     */
    cancel() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error(this.cancelMessage);
        });
    }
    /**
     * @summary Serializes the Poller operation.
     */
    toString() {
        return JSON.stringify({
            state: this.state
        });
    }
}
/**
 * Common properties and methods of the phone number reservation poller operations.
 */
export class PhoneNumberReservationPollOperationBase {
    /**
     * Initializes a new instance of the phone number reservation poll operation
     *
     * @param {TState} state The state of the poll operation
     * @param {PhoneNumberAdministration} client A reference to the generated client used to make requests internally.
     * @param {string} cancelMessage A message to dispaly when a poll operation is cancelled.
     */
    constructor(state, client, cancelMessage = "Canceling not supported.") {
        this.state = state;
        this.client = client;
        this.cancelMessage = cancelMessage;
    }
    /**
     * Gets the reservation associated with a given id.
     *
     * @param {string} reservationId The id of the reservation to fetch.
     * @param {GetReservationOptions} options Additional request options.
     */
    getReservation(reservationId, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-getReservation", options);
            try {
                const _a = yield this.client.getSearchById(reservationId, operationOptionsToRequestOptionsBase(updatedOptions)), { _response } = _a, rest = __rest(_a, ["_response"]);
                return attachHttpResponse(rest, _response);
            }
            catch (e) {
                span.setStatus({
                    code: CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Cancels the reservation associated with a given id.
     *
     * @param {string} reservationId The id of the reservation to cancel.
     * @param {CancelReservationOptions} options Additional request options.
     */
    cancelReservation(reservationId, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-cancelReservation", options);
            try {
                const { _response } = yield this.client.cancelSearch(reservationId, operationOptionsToRequestOptionsBase(updatedOptions));
                return attachHttpResponse({}, _response);
            }
            catch (e) {
                span.setStatus({
                    code: CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Reaches to the service and updates the Poller operation.
     */
    update() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error("Operation not supported");
        });
    }
    /**
     * Reaches to the service and cancels the Poller operation and the underlying request.
     */
    cancel() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error(this.cancelMessage);
        });
    }
    /**
     * @summary Serializes the Poller operation.
     */
    toString() {
        return JSON.stringify({
            state: this.state
        });
    }
}
//# sourceMappingURL=phoneNumberPollerBase.js.map