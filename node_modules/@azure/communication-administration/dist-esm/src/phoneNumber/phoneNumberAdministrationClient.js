// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/// <reference lib="esnext.asynciterable" />
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await, __awaiter, __rest } from "tslib";
import { parseClientArguments, isKeyCredential, createCommunicationAuthPolicy } from "@azure/communication-common";
import { createPipelineFromOptions, operationOptionsToRequestOptionsBase } from "@azure/core-http";
import "@azure/core-paging";
import { CanonicalCode } from "@opentelemetry/api";
import { logger } from "../common/logger";
import { createSpan } from "../common/tracing";
import { PhoneNumberRestClient } from "./generated/src/phoneNumberRestClient";
import { SDK_VERSION } from "./constants";
import { attachHttpResponse } from "../common/mappers";
import { ReleasePhoneNumbersPoller } from "./lro/release/poller";
import { ReservePhoneNumbersPoller } from "./lro/reserve/poller";
import { PurchaseReservationPoller } from "./lro/purchase/poller";
const isPhoneNumberAdministrationClientOptions = (options) => options && !isKeyCredential(options);
/**
 * Client class for interacting with Azure Communication Services PhoneNumber Administration.
 */
export class PhoneNumberAdministrationClient {
    constructor(connectionStringOrUrl, credentialOrOptions, maybeOptions = {}) {
        const { url, credential } = parseClientArguments(connectionStringOrUrl, credentialOrOptions);
        const options = isPhoneNumberAdministrationClientOptions(credentialOrOptions)
            ? credentialOrOptions
            : maybeOptions;
        const libInfo = `azsdk-js-communication-administration/${SDK_VERSION}`;
        if (!options.userAgentOptions) {
            options.userAgentOptions = {};
        }
        if (options.userAgentOptions.userAgentPrefix) {
            options.userAgentOptions.userAgentPrefix = `${options.userAgentOptions.userAgentPrefix} ${libInfo}`;
        }
        else {
            options.userAgentOptions.userAgentPrefix = libInfo;
        }
        const internalPipelineOptions = Object.assign(Object.assign({}, options), {
            loggingOptions: {
                logger: logger.info
            }
        });
        const authPolicy = createCommunicationAuthPolicy(credential);
        const pipeline = createPipelineFromOptions(internalPipelineOptions, authPolicy);
        this.client = new PhoneNumberRestClient(url, pipeline).phoneNumberAdministration;
    }
    /**
     * Configures a phone number, for example to assign a callbackUrl.
     * @param config The configuration details
     * @param options Additional request options.
     */
    configurePhoneNumber(config, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-configurePhoneNumber", options);
            const { phoneNumber, callbackUrl } = config;
            try {
                const { _response } = yield this.client.configureNumber({
                    phoneNumber,
                    pstnConfiguration: {
                        callbackUrl: callbackUrl,
                        applicationId: updatedOptions.applicationId
                    }
                }, operationOptionsToRequestOptionsBase(updatedOptions));
                return attachHttpResponse({}, _response);
            }
            catch (e) {
                span.setStatus({
                    code: CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Unconfigure a phone number, resetting its' configuration.
     * @param phoneNumber Phone Number to unconfigure.
     * @param options Additional request options.
     */
    unconfigurePhoneNumber(phoneNumber, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-unconfigurePhoneNumber", options);
            try {
                const { _response } = yield this.client.unconfigureNumber({ phoneNumber }, operationOptionsToRequestOptionsBase(updatedOptions));
                return attachHttpResponse({}, _response);
            }
            catch (e) {
                span.setStatus({
                    code: CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Updates the capabilities for a list of phone numbers.
     * The response includes the id of the created update capabilities request,
     * remember that id for subsequent calls to getCapabilitiesUpdate.
     * @param phoneNumberCapabilitiesUpdates Dictionary containing a list of phone numbers and their capabilities updates.
     * @param options Additional request options.
     */
    updatePhoneNumbersCapabilities(phoneNumberCapabilitiesUpdates, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-updatePhoneNumbersCapabilities", options);
            try {
                const { capabilitiesUpdateId, _response } = yield this.client.updateCapabilities({
                    phoneNumberCapabilitiesUpdate: phoneNumberCapabilitiesUpdates
                }, operationOptionsToRequestOptionsBase(updatedOptions));
                return attachHttpResponse({ capabilitiesUpdateId }, _response);
            }
            catch (e) {
                span.setStatus({
                    code: CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Get the update capabilities request associated with a given id.
     * @param capabilitiesUpdateId  The id associated with the request.
     * @param options Additional request options.
     */
    getCapabilitiesUpdate(capabilitiesUpdateId, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-getCapabilitiesUpdate", options);
            try {
                const _a = yield this.client.getCapabilitiesUpdate(capabilitiesUpdateId, operationOptionsToRequestOptionsBase(updatedOptions)), { _response } = _a, rest = __rest(_a, ["_response"]);
                return attachHttpResponse(rest, _response);
            }
            catch (e) {
                span.setStatus({
                    code: CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Gets a list of the supported area codes based on location.
     * @param request Request properties to constraint the search scope.
     * @param options Additional request options.
     */
    getAreaCodes(request, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { countryCode: country, locationType, phonePlanId, locationOptionsQueries } = request;
            const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-getAllAreaCodes", options);
            try {
                const _a = yield this.client.getAllAreaCodes(locationType, country, phonePlanId, locationOptionsQueries, operationOptionsToRequestOptionsBase(updatedOptions)), { _response } = _a, rest = __rest(_a, ["_response"]);
                return attachHttpResponse(rest, _response);
            }
            catch (e) {
                span.setStatus({
                    code: CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Gets the configuration for a given phone number.
     * @param phoneNumber The E.164 representation of the phone number whose configuration is requested.
     * @param options Additional request options.
     */
    getPhoneNumberConfiguration(phoneNumber, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-getPhoneNumberConfiguration", options);
            try {
                const { pstnConfiguration, _response } = yield this.client.getNumberConfiguration({ phoneNumber }, operationOptionsToRequestOptionsBase(updatedOptions));
                return attachHttpResponse({ pstnConfiguration }, _response);
            }
            catch (e) {
                span.setStatus({
                    code: CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Gets the location options for a given phone plan.
     * @param request Request properties to constraint the search scope.
     * @param options Additional request options.
     */
    getPhonePlanLocationOptions(request, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-getPhonePlanLocationOptions", options);
            const { countryCode, phonePlanGroupId, phonePlanId } = request;
            try {
                const { locationOptions, _response } = yield this.client.getPhonePlanLocationOptions(countryCode, phonePlanGroupId, phonePlanId, operationOptionsToRequestOptionsBase(updatedOptions));
                return attachHttpResponse({ locationOptions }, _response);
            }
            catch (e) {
                span.setStatus({
                    code: CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Gets the reservation associated with a given id.
     * Use this function to query the status of a phone number reservation.
     * @param reservationId The id of the reservation returned by createReservation.
     * @param options Additional request options.
     */
    getReservation(reservationId, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-getReservation", options);
            try {
                const _a = yield this.client.getSearchById(reservationId, operationOptionsToRequestOptionsBase(updatedOptions)), { _response } = _a, rest = __rest(_a, ["_response"]);
                return attachHttpResponse(rest, _response);
            }
            catch (e) {
                span.setStatus({
                    code: CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Cancels the reservation associated with a given id.
     * @param reservationId The id of the reservation returned by createReservation.
     * @param options Additional request options.
     */
    cancelReservation(reservationId, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-cancelReservation", options);
            try {
                const { _response } = yield this.client.cancelSearch(reservationId, operationOptionsToRequestOptionsBase(updatedOptions));
                return attachHttpResponse({}, _response);
            }
            catch (e) {
                span.setStatus({
                    code: CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * @internal
     * @ignore
     * Deals with the pagination of listSearches.
     * @param {PageSettings} continuationState An object that indicates the position of the paginated request.
     * @param {PageableOptions} [options] Optional parameters for the underlying HTTP request.
     */
    listSearchesPage(continuationState, options = {}) {
        return __asyncGenerator(this, arguments, function* listSearchesPage_1() {
            if (!continuationState.continuationToken) {
                const currentResponse = yield __await(this.client.getAllSearches(options));
                continuationState.continuationToken = currentResponse.nextLink;
                if (currentResponse.entities) {
                    yield yield __await(currentResponse.entities);
                }
            }
            while (continuationState.continuationToken) {
                const currentResponse = yield __await(this.client.getAllSearchesNext(continuationState.continuationToken, options));
                continuationState.continuationToken = currentResponse.nextLink;
                if (currentResponse.entities) {
                    yield yield __await(currentResponse.entities);
                }
            }
        });
    }
    /**
     * @internal
     * @ignore
     * Deals with the iteration of all the available results of listSearches.
     * @param {PageableOptions} [options] Optional parameters for the underlying HTTP request.
     */
    listSearchesAll(options = {}) {
        return __asyncGenerator(this, arguments, function* listSearchesAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listSearchesPage({}, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const entities = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(entities)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Iterates the searches created by the Azure resource.
     *
     * Example usage:
     * ```ts
     * let client = new PhoneNumberAdministrationClient(credentials);
     * for await (const entity of client.listSearches()) {
     *   console.log("id: ", entity.id);
     * }
     * ```
     * Gets all searches created by the Azure resource.
     * @param {PageableOptions} [options] Optional parameters for the underlying HTTP request.
     */
    listSearches(options = {}) {
        const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-listSearches", options);
        const iter = this.listSearchesAll(options);
        span.end();
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings = {}) => this.listSearchesPage(settings, updatedOptions)
        };
    }
    /**
     * @internal
     * @ignore
     * Deals with the pagination of listReleases.
     * @param {PageSettings} continuationState An object that indicates the position of the paginated request.
     * @param {PageableOptions} [options] Optional parameters for the underlying HTTP request.
     */
    listReleasesPage(continuationState, options = {}) {
        return __asyncGenerator(this, arguments, function* listReleasesPage_1() {
            if (continuationState.continuationToken == null) {
                const currentResponse = yield __await(this.client.getAllReleases(options));
                continuationState.continuationToken = currentResponse.nextLink;
                if (currentResponse.entities) {
                    yield yield __await(currentResponse.entities);
                }
            }
            while (continuationState.continuationToken) {
                const currentResponse = yield __await(this.client.getAllReleasesNext(continuationState.continuationToken, options));
                continuationState.continuationToken = currentResponse.nextLink;
                if (currentResponse.entities) {
                    yield yield __await(currentResponse.entities);
                }
            }
        });
    }
    /**
     * @internal
     * @ignore
     * Deals with the iteration of all the available results of listReleases.
     * @param {PageableOptions} [options] Optional parameters for the underlying HTTP request.
     */
    listReleasesAll(options = {}) {
        return __asyncGenerator(this, arguments, function* listReleasesAll_1() {
            var e_2, _a;
            try {
                for (var _b = __asyncValues(this.listReleasesPage({}, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const entities = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(entities)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Iterates the releases created by the Azure resource.
     *
     * Example usage:
     * ```ts
     * let client = new PhoneNumberAdministrationClient(credentials);
     * for await (const entity of client.listReleases()) {
     *   console.log("id: ", entity.id);
     * }
     * ```
     * Gets all releases created by the Azure resource.
     * @param {PageableOptions} [options] Optional parameters for the underlying HTTP request.
     */
    listReleases(options = {}) {
        const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-listReleases", options);
        const iter = this.listReleasesAll(options);
        span.end();
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings = {}) => this.listReleasesPage(settings, updatedOptions)
        };
    }
    /**
     * @internal
     * @ignore
     * Deals with the pagination of listSupportedCountries.
     * @param {PageSettings} continuationState An object that indicates the position of the paginated request.
     * @param {ListSupportedCountriesOptions} [options] Optional parameters for the underlying HTTP request.
     */
    listSupportedCountriesPage(continuationState, options = {}) {
        return __asyncGenerator(this, arguments, function* listSupportedCountriesPage_1() {
            if (continuationState.continuationToken == null) {
                const currentResponse = yield __await(this.client.getAllSupportedCountries(options));
                continuationState.continuationToken = currentResponse.nextLink;
                if (currentResponse.countries) {
                    yield yield __await(currentResponse.countries);
                }
            }
            while (continuationState.continuationToken) {
                const currentResponse = yield __await(this.client.getAllSupportedCountriesNext(continuationState.continuationToken, options));
                continuationState.continuationToken = currentResponse.nextLink;
                if (currentResponse.countries) {
                    yield yield __await(currentResponse.countries);
                }
            }
        });
    }
    /**
     * @internal
     * @ignore
     * Deals with the iteration of all the available results of listSupportedCountries.
     * @param {ListSupportedCountriesOptions} [options] Optional parameters for the underlying HTTP request.
     */
    listSupportedCountriesAll(options = {}) {
        return __asyncGenerator(this, arguments, function* listSupportedCountriesAll_1() {
            var e_3, _a;
            try {
                for (var _b = __asyncValues(this.listSupportedCountriesPage({}, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const countries = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(countries)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Iterates the supported countries.
     *
     * Example usage:
     * ```ts
     * let client = new PhoneNumberAdministrationClient(credentials);
     * for await (const country of client.listSupportedCountries()) {
     *   console.log("country name: ", country.localizedName);
     * }
     * ```
     * @summary List all supported countries.
     * @param {ListSupportedCountriesOptions} [options] The optional parameters.
     */
    listSupportedCountries(options = {}) {
        const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-listAllSupportedCountries", options);
        const iter = this.listSupportedCountriesAll(options);
        span.end();
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings = {}) => this.listSupportedCountriesPage(settings, updatedOptions)
        };
    }
    /**
     * @internal
     * @ignore
     * Deals with the pagination of listPhoneNumbers.
     * @param {PageSettings} continuationState An object that indicates the position of the paginated request.
     * @param {ListPhoneNumbersOptions} [options] Optional parameters for the underlying HTTP request.
     */
    listPhoneNumbersPage(continuationState, options = {}) {
        return __asyncGenerator(this, arguments, function* listPhoneNumbersPage_1() {
            if (continuationState.continuationToken == null) {
                const currentResponse = yield __await(this.client.getAllPhoneNumbers(options));
                continuationState.continuationToken = currentResponse.nextLink;
                if (currentResponse.phoneNumbers) {
                    yield yield __await(currentResponse.phoneNumbers);
                }
            }
            while (continuationState.continuationToken) {
                const currentResponse = yield __await(this.client.getAllPhoneNumbersNext(continuationState.continuationToken, options));
                continuationState.continuationToken = currentResponse.nextLink;
                if (currentResponse.phoneNumbers) {
                    yield yield __await(currentResponse.phoneNumbers);
                }
            }
        });
    }
    /**
     * @internal
     * @ignore
     * Deals with the iteration of all the available results of listPhoneNumbers.
     * @param {ListPhoneNumbersOptions} [options] Optional parameters for the underlying HTTP request.
     */
    listPhoneNumbersAll(options = {}) {
        return __asyncGenerator(this, arguments, function* listPhoneNumbersAll_1() {
            var e_4, _a;
            try {
                for (var _b = __asyncValues(this.listPhoneNumbersPage({}, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const phoneNumbers = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(phoneNumbers)));
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
    }
    /**
     * Iterates the acquired phone numbers.
     *
     * Example usage:
     * ```ts
     * let client = new PhoneNumberAdministrationClient(credentials);
     * for await (const acquired of client.listPhoneNumbers()) {
     *   console.log("phone number: ", acquired.phoneNumber);
     * }
     * ```
     * @summary List all acquired phone numbers.
     * @param {ListPhoneNumbersOptions} [options] The optional parameters.
     */
    listPhoneNumbers(options = {}) {
        const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-listAllPhoneNumbers", options);
        const iter = this.listPhoneNumbersAll(options);
        span.end();
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings = {}) => this.listPhoneNumbersPage(settings, updatedOptions)
        };
    }
    /**
     * @internal
     * @ignore
     * Deals with the pagination of listPhonePlanGroups.
     * @param {PageSettings} continuationState An object that indicates the position of the paginated request.
     * @param countryCode The ISO 3166-2 country code, for example "FR" or "CN".
     * @param {ListPhonePlanGroupsOptions} [options] Optional parameters for the underlying HTTP request.
     */
    listPhonePlanGroupsPage(continuationState, countryCode, options = {}) {
        return __asyncGenerator(this, arguments, function* listPhonePlanGroupsPage_1() {
            if (continuationState.continuationToken == null) {
                const currentResponse = yield __await(this.client.getPhonePlanGroups(countryCode, options));
                continuationState.continuationToken = currentResponse.nextLink;
                if (currentResponse.phonePlanGroups) {
                    yield yield __await(currentResponse.phonePlanGroups);
                }
            }
            while (continuationState.continuationToken) {
                const currentResponse = yield __await(this.client.getPhonePlanGroupsNext(countryCode, continuationState.continuationToken, options));
                continuationState.continuationToken = currentResponse.nextLink;
                if (currentResponse.phonePlanGroups) {
                    yield yield __await(currentResponse.phonePlanGroups);
                }
            }
        });
    }
    /**
     * @internal
     * @ignore
     * Deals with the iteration of all the available results of listPhonePlanGroups.
     * @param countryCode The ISO 3166-2 country code, for example "FR" or "CN".
     * @param {ListPlansForCountryOptions} [options] Optional parameters for the underlying HTTP request.
     */
    listPhonePlanGroupsAll(countryCode, options = {}) {
        return __asyncGenerator(this, arguments, function* listPhonePlanGroupsAll_1() {
            var e_5, _a;
            try {
                for (var _b = __asyncValues(this.listPhonePlanGroupsPage({}, countryCode, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const phonePlanGroups = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(phonePlanGroups)));
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_5) throw e_5.error; }
            }
        });
    }
    /**
     * Iterates the available phone plan groups for a country.
     *
     * Example usage:
     * ```ts
     * let client = new PhoneNumberAdministrationClient(credentials);
     * for await (const phonePlanGroup of client.listPhonePlanGroups("CA")) {
     *   console.log("plan group id: ", phonePlanGroup.phonePlanGroupId);
     * }
     * ```
     * @summary List all available phone plan groups for a country.
     * @param {ListPhonePlanGroupsOptions} [options] The optional parameters.
     */
    listPhonePlanGroups(countryCode, options = {}) {
        const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-listPhonePlanGroups", options);
        const iter = this.listPhonePlanGroupsAll(countryCode, options);
        span.end();
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings = {}) => this.listPhonePlanGroupsPage(settings, countryCode, updatedOptions)
        };
    }
    /**
     * @internal
     * @ignore
     * Deals with the pagination of listPhonePlans.
     * @param {PageSettings} continuationState An object that indicates the position of the paginated request.
     * @param planGroupInfo Information need to search for plans.
     * @param {GetPhonePlansOptions} [options] Optional parameters for the underlying HTTP request.
     */
    listPhonePlansPage(continuationState, planGroupInfo, options = {}) {
        return __asyncGenerator(this, arguments, function* listPhonePlansPage_1() {
            if (continuationState.continuationToken == null) {
                const currentResponse = yield __await(this.client.getPhonePlans(planGroupInfo.countryCode, planGroupInfo.phonePlanGroupId, options));
                continuationState.continuationToken = currentResponse.nextLink;
                if (currentResponse.phonePlans) {
                    yield yield __await(currentResponse.phonePlans);
                }
            }
            while (continuationState.continuationToken) {
                const currentResponse = yield __await(this.client.getPhonePlansNext(planGroupInfo.countryCode, planGroupInfo.phonePlanGroupId, continuationState.continuationToken, options));
                continuationState.continuationToken = currentResponse.nextLink;
                if (currentResponse.phonePlans) {
                    yield yield __await(currentResponse.phonePlans);
                }
            }
        });
    }
    /**
     * @internal
     * @ignore
     * Deals with the iteration of all the available results of listPhonePlans.
     * @param planGroupInfo Information need to search for plans.
     * @param {ListPhonePlansOptions} [options] Optional parameters for the underlying HTTP request.
     */
    listPhonePlansAll(planGroupInfo, options = {}) {
        return __asyncGenerator(this, arguments, function* listPhonePlansAll_1() {
            var e_6, _a;
            try {
                for (var _b = __asyncValues(this.listPhonePlansPage({}, planGroupInfo, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const phonePlans = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(phonePlans)));
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_6) throw e_6.error; }
            }
        });
    }
    /**
     * Iterates the available phone plan for a plan group.
     *
     * Example usage:
     * ```ts
     * let client = new PhoneNumberAdministrationClient(credentials);
     * for await (const phonePlan of client.listPhonePlanGroups(PLAN_GROUP_INFO)) {
     *   console.log("plan id: ", phonePlan.phonePlanId);
     * }
     *
     * Gets all available phone plans for a given plan group.
     * @param planGroupInfo Information need to search for plans.
     * @param options Additional request options.
     */
    listPhonePlans(planGroupInfo, options = {}) {
        const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-listPhonePlans", options);
        const iter = this.listPhonePlansAll(planGroupInfo, options);
        span.end();
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings = {}) => this.listPhonePlansPage(settings, planGroupInfo, updatedOptions)
        };
    }
    /**
     * Starts the release of a list of acquired phone numbers.
     *
     * This function returns a Long Running Operation poller that allows you to wait indefinitely until the operation is complete.
     *
     * Example usage:
     * ```ts
     * const client = new PhoneNumberAdministrationClient(CONNECTION_STRING);
     * const releasePoller = await client.beginReleasePhoneNumbers(PHONE_NUMBERS);
     *
     * // Serializing the poller
     * const serialized = releasePoller.toString();
     *
     * // Waiting until it's done
     * const results = await releasePoller.pollUntilDone();
     * console.log(results);
     * ```
     * @param {string[]} phoneNumbers The phone numbers to be released.
     * @param {BeginReleasePhoneNumbersOptions} options Additional request options.
     */
    beginReleasePhoneNumbers(phoneNumbers, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { pollInterval, resumeFrom } = options, requestOptions = __rest(options, ["pollInterval", "resumeFrom"]);
            const poller = new ReleasePhoneNumbersPoller({
                phoneNumbers,
                client: this.client,
                pollInterval,
                resumeFrom,
                requestOptions
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Starts a search for phone numbers given some constraints such as name or area code.
     * The phone numbers that are found are reserved until you cancel, purchase or the reservation expires.
     *
     * This function returns a Long Running Operation poller that allows you to wait indefinitely until the operation is complete.
     *
     * Example usage:
     * ```ts
     * const client = new PhoneNumberAdministrationClient(CONNECTION_STRING);
     * const reservePoller = await client.beginReservePhoneNumbers(RESERVATION_REQUEST);
     *
     * // Serializing the poller
     * const serialized = reservePoller.toString();
     *
     * // Waiting until it's done
     * const results = await reservePoller.pollUntilDone();
     * console.log(results);
     * ```
     *
     * @param {CreateReservationRequest} reservationRequest Request properties to constraint the search scope.
     * @param {BeginReservePhoneNumbersOptions} options Additional request options.
     */
    beginReservePhoneNumbers(reservationRequest, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { pollInterval, resumeFrom } = options, requestOptions = __rest(options, ["pollInterval", "resumeFrom"]);
            const poller = new ReservePhoneNumbersPoller({
                reservationRequest,
                client: this.client,
                pollInterval,
                resumeFrom,
                requestOptions
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Starts the purchase of the phone number(s) in the reservation associated with a given id.
     *
     * This function returns a Long Running Operation poller that allows you to wait indefinitely until the operation is complete.
     *
     * Example usage:
     * ```ts
     * const client = new PhoneNumberAdministrationClient(CONNECTION_STRING);
     * const purchasePoller = await client.beginPurchaseReservation(RESERVATION_ID);
     *
     * // Serializing the poller
     * const serialized = purchasePoller.toString();
     *
     * // Waiting until it's done
     * const results = await purchasePoller.pollUntilDone();
     * console.log(results);
     * ```
     *
     * @param {string} reservationId The id of the reservation to purchase.
     * @param {BeginPurchaseReservationOptions} options Additional request options.
     */
    beginPurchaseReservation(reservationId, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { pollInterval, resumeFrom } = options, requestOptions = __rest(options, ["pollInterval", "resumeFrom"]);
            const poller = new PurchaseReservationPoller({
                reservationId,
                client: this.client,
                pollInterval,
                resumeFrom,
                requestOptions
            });
            yield poller.poll();
            return poller;
        });
    }
}
//# sourceMappingURL=phoneNumberAdministrationClient.js.map