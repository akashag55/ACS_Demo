/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/**
 * Class representing a PhoneNumberAdministration.
 */
export class PhoneNumberAdministration {
    /**
     * Initialize a new instance of the class PhoneNumberAdministration class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the list of the acquired phone numbers.
     * @param options The options parameters.
     */
    getAllPhoneNumbers(options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ options: operationOptions }, getAllPhoneNumbersOperationSpec);
    }
    /**
     * Gets a list of the supported area codes
     * @param locationType The type of location information required by the plan.
     * @param countryCode The ISO 3166-2 country code
     * @param phonePlanId The plan id from which to search area codes.
     * @param body Location options for when location type is selection.
     * @param options The options parameters.
     */
    getAllAreaCodes(locationType, countryCode, phonePlanId, body, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({
            locationType,
            countryCode,
            phonePlanId,
            body,
            options: operationOptions
        }, getAllAreaCodesOperationSpec);
    }
    /**
     * Get capabilities by capabilities update id.
     * @param capabilitiesUpdateId
     * @param options The options parameters.
     */
    getCapabilitiesUpdate(capabilitiesUpdateId, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ capabilitiesUpdateId, options: operationOptions }, getCapabilitiesUpdateOperationSpec);
    }
    /**
     * Adds or removes phone number capabilities
     * @param body Represents a numbers capabilities update request
     * @param options The options parameters.
     */
    updateCapabilities(body, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ body, options: operationOptions }, updateCapabilitiesOperationSpec);
    }
    /**
     * Gets a list of supported countries
     * @param options The options parameters.
     */
    getAllSupportedCountries(options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ options: operationOptions }, getAllSupportedCountriesOperationSpec);
    }
    /**
     * Endpoint for getting number configurations
     * @param body The phone number whose configuration is to be fetched
     * @param options The options parameters.
     */
    getNumberConfiguration(body, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ body, options: operationOptions }, getNumberConfigurationOperationSpec);
    }
    /**
     * Endpoint for configuring a pstn number
     * @param body Details of pstn number configuration of the given phoneNumber
     * @param options The options parameters.
     */
    configureNumber(body, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ body, options: operationOptions }, configureNumberOperationSpec);
    }
    /**
     * Endpoint for unconfiguring a pstn number by removing the configuration
     * @param body The phone number to un-configure
     * @param options The options parameters.
     */
    unconfigureNumber(body, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ body, options: operationOptions }, unconfigureNumberOperationSpec);
    }
    /**
     * Gets a list of phone plan groups for the given country
     * @param countryCode The ISO 3166-2 country code.
     * @param options The options parameters.
     */
    getPhonePlanGroups(countryCode, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ countryCode, options: operationOptions }, getPhonePlanGroupsOperationSpec);
    }
    /**
     * Gets a list of phone plans for a phone plan group
     * @param countryCode The ISO 3166-2 country code.
     * @param phonePlanGroupId
     * @param options The options parameters.
     */
    getPhonePlans(countryCode, phonePlanGroupId, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ countryCode, phonePlanGroupId, options: operationOptions }, getPhonePlansOperationSpec);
    }
    /**
     * Gets a list of location options for a phone plan
     * @param countryCode The ISO 3166-2 country code.
     * @param phonePlanGroupId
     * @param phonePlanId
     * @param options The options parameters.
     */
    getPhonePlanLocationOptions(countryCode, phonePlanGroupId, phonePlanId, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ countryCode, phonePlanGroupId, phonePlanId, options: operationOptions }, getPhonePlanLocationOptionsOperationSpec);
    }
    /**
     * Gets a release by a release id
     * @param releaseId Represents the release id
     * @param options The options parameters.
     */
    getReleaseById(releaseId, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ releaseId, options: operationOptions }, getReleaseByIdOperationSpec);
    }
    /**
     * Creates a release for the given phone numbers
     * @param body Config api Release request
     * @param options The options parameters.
     */
    releasePhoneNumbers(body, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ body, options: operationOptions }, releasePhoneNumbersOperationSpec);
    }
    /**
     * Gets a list of all releases
     * @param options The options parameters.
     */
    getAllReleases(options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ options: operationOptions }, getAllReleasesOperationSpec);
    }
    /**
     * Get search by search id
     * @param searchId The search id to be searched for
     * @param options The options parameters.
     */
    getSearchById(searchId, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ searchId, options: operationOptions }, getSearchByIdOperationSpec);
    }
    /**
     * Creates a phone number search
     * @param body Defines the search options
     * @param options The options parameters.
     */
    createSearch(body, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ body, options: operationOptions }, createSearchOperationSpec);
    }
    /**
     * Gets a list of all searches
     * @param options The options parameters.
     */
    getAllSearches(options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ options: operationOptions }, getAllSearchesOperationSpec);
    }
    /**
     * Cancels the search. This means existing numbers in the search will be made available.
     * @param searchId The search id to be canceled
     * @param options The options parameters.
     */
    cancelSearch(searchId, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ searchId, options: operationOptions }, cancelSearchOperationSpec);
    }
    /**
     * Purchases the phone number search.
     * @param searchId The search id to be purchased
     * @param options The options parameters.
     */
    purchaseSearch(searchId, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ searchId, options: operationOptions }, purchaseSearchOperationSpec);
    }
    /**
     * GetAllPhoneNumbersNext
     * @param nextLink The nextLink from the previous successful call to the GetAllPhoneNumbers method.
     * @param options The options parameters.
     */
    getAllPhoneNumbersNext(nextLink, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ nextLink, options: operationOptions }, getAllPhoneNumbersNextOperationSpec);
    }
    /**
     * GetAllSupportedCountriesNext
     * @param nextLink The nextLink from the previous successful call to the GetAllSupportedCountries
     *                 method.
     * @param options The options parameters.
     */
    getAllSupportedCountriesNext(nextLink, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ nextLink, options: operationOptions }, getAllSupportedCountriesNextOperationSpec);
    }
    /**
     * GetPhonePlanGroupsNext
     * @param countryCode The ISO 3166-2 country code.
     * @param nextLink The nextLink from the previous successful call to the GetPhonePlanGroups method.
     * @param options The options parameters.
     */
    getPhonePlanGroupsNext(countryCode, nextLink, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ countryCode, nextLink, options: operationOptions }, getPhonePlanGroupsNextOperationSpec);
    }
    /**
     * GetPhonePlansNext
     * @param countryCode The ISO 3166-2 country code.
     * @param phonePlanGroupId
     * @param nextLink The nextLink from the previous successful call to the GetPhonePlans method.
     * @param options The options parameters.
     */
    getPhonePlansNext(countryCode, phonePlanGroupId, nextLink, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ countryCode, phonePlanGroupId, nextLink, options: operationOptions }, getPhonePlansNextOperationSpec);
    }
    /**
     * GetAllReleasesNext
     * @param nextLink The nextLink from the previous successful call to the GetAllReleases method.
     * @param options The options parameters.
     */
    getAllReleasesNext(nextLink, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ nextLink, options: operationOptions }, getAllReleasesNextOperationSpec);
    }
    /**
     * GetAllSearchesNext
     * @param nextLink The nextLink from the previous successful call to the GetAllSearches method.
     * @param options The options parameters.
     */
    getAllSearchesNext(nextLink, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ nextLink, options: operationOptions }, getAllSearchesNextOperationSpec);
    }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);
const getAllPhoneNumbersOperationSpec = {
    path: "/administration/phonenumbers/phonenumbers",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.AcquiredPhoneNumbers
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.locale, Parameters.skip, Parameters.take, Parameters.apiVersion],
    urlParameters: [Parameters.endpoint],
    serializer
};
const getAllAreaCodesOperationSpec = {
    path: "/administration/phonenumbers/countries/{countryCode}/areacodes",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.AreaCodes
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.body,
    queryParameters: [Parameters.apiVersion, Parameters.locationType, Parameters.phonePlanId],
    urlParameters: [Parameters.endpoint, Parameters.countryCode],
    headerParameters: [Parameters.contentType],
    mediaType: "json",
    serializer
};
const getCapabilitiesUpdateOperationSpec = {
    path: "/administration/phonenumbers/capabilities/{capabilitiesUpdateId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.UpdatePhoneNumberCapabilitiesResponse
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.capabilitiesUpdateId],
    serializer
};
const updateCapabilitiesOperationSpec = {
    path: "/administration/phonenumbers/capabilities",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.UpdateNumberCapabilitiesResponse
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.body1,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.contentType],
    mediaType: "json",
    serializer
};
const getAllSupportedCountriesOperationSpec = {
    path: "/administration/phonenumbers/countries",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PhoneNumberCountries
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.locale, Parameters.skip, Parameters.take, Parameters.apiVersion],
    urlParameters: [Parameters.endpoint],
    serializer
};
const getNumberConfigurationOperationSpec = {
    path: "/administration/phonenumbers/numberconfiguration",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.NumberConfigurationResponse
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.body2,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.contentType],
    mediaType: "json",
    serializer
};
const configureNumberOperationSpec = {
    path: "/administration/phonenumbers/numberconfiguration/configure",
    httpMethod: "PATCH",
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.body3,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.contentType],
    mediaType: "json",
    serializer
};
const unconfigureNumberOperationSpec = {
    path: "/administration/phonenumbers/numberconfiguration/unconfigure",
    httpMethod: "PATCH",
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.body2,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.contentType],
    mediaType: "json",
    serializer
};
const getPhonePlanGroupsOperationSpec = {
    path: "/administration/phonenumbers/countries/{countryCode}/phoneplangroups",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PhonePlanGroups
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.locale,
        Parameters.skip,
        Parameters.take,
        Parameters.apiVersion,
        Parameters.includeRateInformation
    ],
    urlParameters: [Parameters.endpoint, Parameters.countryCode],
    serializer
};
const getPhonePlansOperationSpec = {
    path: "/administration/phonenumbers/countries/{countryCode}/phoneplangroups/{phonePlanGroupId}/phoneplans",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PhonePlansResponse
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.locale, Parameters.skip, Parameters.take, Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.countryCode, Parameters.phonePlanGroupId],
    serializer
};
const getPhonePlanLocationOptionsOperationSpec = {
    path: "/administration/phonenumbers/countries/{countryCode}/phoneplangroups/{phonePlanGroupId}/phoneplans/{phonePlanId}/locationoptions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.LocationOptionsResponse
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.locale, Parameters.apiVersion],
    urlParameters: [
        Parameters.endpoint,
        Parameters.countryCode,
        Parameters.phonePlanGroupId,
        Parameters.phonePlanId1
    ],
    serializer
};
const getReleaseByIdOperationSpec = {
    path: "/administration/phonenumbers/releases/{releaseId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PhoneNumberRelease
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.releaseId],
    serializer
};
const releasePhoneNumbersOperationSpec = {
    path: "/administration/phonenumbers/releases",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.ReleaseResponse
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.body4,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.contentType],
    mediaType: "json",
    serializer
};
const getAllReleasesOperationSpec = {
    path: "/administration/phonenumbers/releases",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PhoneNumberEntities
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.skip, Parameters.take, Parameters.apiVersion],
    urlParameters: [Parameters.endpoint],
    serializer
};
const getSearchByIdOperationSpec = {
    path: "/administration/phonenumbers/searches/{searchId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PhoneNumberReservation
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.searchId],
    serializer
};
const createSearchOperationSpec = {
    path: "/administration/phonenumbers/searches",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Mappers.CreateSearchResponse
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.body5,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.contentType],
    mediaType: "json",
    serializer
};
const getAllSearchesOperationSpec = {
    path: "/administration/phonenumbers/searches",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PhoneNumberEntities
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.skip, Parameters.take, Parameters.apiVersion],
    urlParameters: [Parameters.endpoint],
    serializer
};
const cancelSearchOperationSpec = {
    path: "/administration/phonenumbers/searches/{searchId}/cancel",
    httpMethod: "POST",
    responses: {
        202: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.searchId],
    serializer
};
const purchaseSearchOperationSpec = {
    path: "/administration/phonenumbers/searches/{searchId}/purchase",
    httpMethod: "POST",
    responses: {
        202: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.searchId],
    serializer
};
const getAllPhoneNumbersNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.AcquiredPhoneNumbers
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.locale, Parameters.skip, Parameters.take, Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.nextLink],
    serializer
};
const getAllSupportedCountriesNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PhoneNumberCountries
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.locale, Parameters.skip, Parameters.take, Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.nextLink],
    serializer
};
const getPhonePlanGroupsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PhonePlanGroups
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.locale,
        Parameters.skip,
        Parameters.take,
        Parameters.apiVersion,
        Parameters.includeRateInformation
    ],
    urlParameters: [Parameters.endpoint, Parameters.countryCode, Parameters.nextLink],
    serializer
};
const getPhonePlansNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PhonePlansResponse
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.locale, Parameters.skip, Parameters.take, Parameters.apiVersion],
    urlParameters: [
        Parameters.endpoint,
        Parameters.countryCode,
        Parameters.phonePlanGroupId,
        Parameters.nextLink
    ],
    serializer
};
const getAllReleasesNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PhoneNumberEntities
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.skip, Parameters.take, Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.nextLink],
    serializer
};
const getAllSearchesNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PhoneNumberEntities
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.skip, Parameters.take, Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.nextLink],
    serializer
};
//# sourceMappingURL=phoneNumberAdministration.js.map