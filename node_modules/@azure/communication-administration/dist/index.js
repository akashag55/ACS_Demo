'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var communicationCommon = require('@azure/communication-common');
var coreAuth = require('@azure/core-auth');
var coreHttp = require('@azure/core-http');
var api = require('@opentelemetry/api');
var logger$1 = require('@azure/logger');
var coreTracing = require('@azure/core-tracing');
require('@azure/core-paging');
var coreLro = require('@azure/core-lro');

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const CommunicationIdentity = {
    type: {
        name: "Composite",
        className: "CommunicationIdentity",
        modelProperties: {
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CommunicationIdentityUpdateRequest = {
    type: {
        name: "Composite",
        className: "CommunicationIdentityUpdateRequest",
        modelProperties: {
            tokensValidFrom: {
                serializedName: "tokensValidFrom",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const CommunicationTokenRequest = {
    type: {
        name: "Composite",
        className: "CommunicationTokenRequest",
        modelProperties: {
            scopes: {
                serializedName: "scopes",
                required: true,
                type: {
                    name: "Sequence",
                    element: { type: { name: "String" } }
                }
            }
        }
    }
};
const CommunicationIdentityToken = {
    type: {
        name: "Composite",
        className: "CommunicationIdentityToken",
        modelProperties: {
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            },
            token: {
                serializedName: "token",
                required: true,
                type: {
                    name: "String"
                }
            },
            expiresOn: {
                serializedName: "expiresOn",
                required: true,
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    CommunicationIdentity: CommunicationIdentity,
    CommunicationIdentityUpdateRequest: CommunicationIdentityUpdateRequest,
    CommunicationTokenRequest: CommunicationTokenRequest,
    CommunicationIdentityToken: CommunicationIdentityToken
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const endpoint = {
    parameterPath: "endpoint",
    mapper: {
        serializedName: "endpoint",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2020-07-20-preview2",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const id = {
    parameterPath: "id",
    mapper: {
        serializedName: "id",
        required: true,
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/merge-patch+json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const body = {
    parameterPath: "body",
    mapper: CommunicationIdentityUpdateRequest
};
const contentType1 = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const body1 = {
    parameterPath: "body",
    mapper: CommunicationTokenRequest
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/**
 * Class representing a CommunicationIdentity.
 */
class CommunicationIdentity$1 {
    /**
     * Initialize a new instance of the class CommunicationIdentity class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Create a new identity.
     * @param options The options parameters.
     */
    create(options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ options: operationOptions }, createOperationSpec);
    }
    /**
     * Delete the identity, revoke all tokens of the identity and delete all associated data.
     * @param id Identifier of the identity to be deleted.
     * @param options The options parameters.
     */
    delete(id, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ id, options: operationOptions }, deleteOperationSpec);
    }
    /**
     * Update an Identity.
     * @param id Identifier of the identity.
     * @param body The properties of the identity to be updated.
     * @param options The options parameters.
     */
    update(id, body, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ id, body, options: operationOptions }, updateOperationSpec);
    }
    /**
     * Generate a new token for an identity.
     * @param id Identifier of the identity to issue token for.
     * @param body Requesting scopes for the new token.
     * @param options The options parameters.
     */
    issueToken(id, body, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ id, body, options: operationOptions }, issueTokenOperationSpec);
    }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);
const createOperationSpec = {
    path: "/identities",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CommunicationIdentity
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [endpoint],
    serializer
};
const deleteOperationSpec = {
    path: "/identities/{id}",
    httpMethod: "DELETE",
    responses: { 204: {} },
    queryParameters: [apiVersion],
    urlParameters: [endpoint, id],
    serializer
};
const updateOperationSpec = {
    path: "/identities/{id}",
    httpMethod: "PATCH",
    responses: { 204: {} },
    requestBody: body,
    queryParameters: [apiVersion],
    urlParameters: [endpoint, id],
    headerParameters: [contentType],
    mediaType: "json",
    serializer
};
const issueTokenOperationSpec = {
    path: "/identities/{id}/token",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CommunicationIdentityToken
        }
    },
    requestBody: body1,
    queryParameters: [apiVersion],
    urlParameters: [endpoint, id],
    headerParameters: [contentType1],
    mediaType: "json",
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const packageName = "azure-communication-administration-identity";
const packageVersion = "1.0.0-beta.4";
class IdentityRestClientContext extends coreHttp.ServiceClient {
    /**
     * Initializes a new instance of the IdentityRestClientContext class.
     * @param endpoint Auth and Identity endpoint
     * @param options The parameter options
     */
    constructor(endpoint, options) {
        if (endpoint === undefined) {
            throw new Error("'endpoint' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        if (!options.userAgent) {
            const defaultUserAgent = coreHttp.getDefaultUserAgentValue();
            options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;
        }
        super(undefined, options);
        this.requestContentType = "application/json; charset=utf-8";
        this.baseUri = options.endpoint || "{endpoint}";
        // Parameter assignments
        this.endpoint = endpoint;
        // Assigning values to Constant parameters
        this.apiVersion = options.apiVersion || "2020-07-20-preview2";
    }
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class IdentityRestClient extends IdentityRestClientContext {
    /**
     * Initializes a new instance of the IdentityRestClient class.
     * @param endpoint Auth and Identity endpoint
     * @param options The parameter options
     */
    constructor(endpoint, options) {
        super(endpoint, options);
        this.communicationIdentity = new CommunicationIdentity$1(this);
    }
}

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const SDK_VERSION = "1.0.0-beta.4";

// Copyright (c) Microsoft Corporation.
/**
 * The @azure/logger configuration for this package.
 */
const logger = logger$1.createClientLogger("communication-administration");

// Copyright (c) Microsoft Corporation.
/**
 * Creates a span using the global tracer.
 * @ignore
 * @param name The name of the operation being performed.
 * @param tracingOptions The options for the underlying http request.
 */
function createSpan(operationName, operationOptions) {
    const tracer = coreTracing.getTracer();
    const tracingOptions = operationOptions.tracingOptions || {};
    const spanOptions = Object.assign(Object.assign({}, tracingOptions.spanOptions), { kind: api.SpanKind.INTERNAL });
    const span = tracer.startSpan(`Azure.Communication.${operationName}`, spanOptions);
    span.setAttribute("az.namespace", "Microsoft.Communication");
    let newSpanOptions = tracingOptions.spanOptions || {};
    if (span.isRecording()) {
        newSpanOptions = Object.assign(Object.assign({}, tracingOptions.spanOptions), { parent: span.context(), attributes: Object.assign(Object.assign({}, spanOptions.attributes), { "az.namespace": "Microsoft.Communication" }) });
    }
    const newTracingOptions = Object.assign(Object.assign({}, tracingOptions), { spanOptions: newSpanOptions });
    const newOperationOptions = Object.assign(Object.assign({}, operationOptions), { tracingOptions: newTracingOptions });
    return {
        span,
        updatedOptions: newOperationOptions
    };
}

// Copyright (c) Microsoft Corporation.
/**
 * Attach http response to a model
 */
const attachHttpResponse = (model, httpResponse) => {
    const r = tslib.__rest(httpResponse, ["parsedBody", "bodyAsText"]);
    return Object.defineProperty(model, "_response", {
        value: r
    });
};

// Copyright (c) Microsoft Corporation.
const isCommunicationIdentityOptions = (options) => options && !coreAuth.isTokenCredential(options) && !communicationCommon.isKeyCredential(options);
/**
 * Client class for interacting with Azure Communication Services User Token Management.
 */
class CommunicationIdentityClient {
    /**
     * Creates an instance of CommunicationIdentity.
     *
     * @param {string} url The endpoint to the service
     * @param {KeyCredential} credential An object that is used to authenticate requests to the service. Use the AzureKeyCredential or `@azure/identity` to create a credential.
     * @param {CommunicationIdentityOptions} [options={}] Options to configure the HTTP pipeline.
     */
    constructor(connectionStringOrUrl, credentialOrOptions, maybeOptions = {}) {
        const { url, credential } = communicationCommon.parseClientArguments(connectionStringOrUrl, credentialOrOptions);
        const options = isCommunicationIdentityOptions(credentialOrOptions)
            ? credentialOrOptions
            : maybeOptions;
        const libInfo = `azsdk-js-communication-administration/${SDK_VERSION}`;
        if (!options.userAgentOptions) {
            options.userAgentOptions = {};
        }
        if (options.userAgentOptions.userAgentPrefix) {
            options.userAgentOptions.userAgentPrefix = `${options.userAgentOptions.userAgentPrefix} ${libInfo}`;
        }
        else {
            options.userAgentOptions.userAgentPrefix = libInfo;
        }
        const internalPipelineOptions = Object.assign(Object.assign({}, options), {
            loggingOptions: {
                logger: logger.info
            }
        });
        const authPolicy = communicationCommon.createCommunicationAuthPolicy(credential);
        const pipeline = coreHttp.createPipelineFromOptions(internalPipelineOptions, authPolicy);
        this.client = new IdentityRestClient(url, pipeline).communicationIdentity;
    }
    /**
     * Creates a scoped user token.
     *
     * @param {CommunicationUser} user The user whose tokens are being revoked.
     * @param {TokenScope[]} scopes Scopes to include in the token.
     * @param {OperationOptions} [options={}] Additional options for the request.
     */
    issueToken(user, scopes, options = {}) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const { span, updatedOptions } = createSpan("CommunicationIdentity-issueToken", options);
            try {
                const { token, id, expiresOn, _response } = yield this.client.issueToken(user.communicationUserId, { scopes }, coreHttp.operationOptionsToRequestOptionsBase(updatedOptions));
                const results = {
                    token,
                    expiresOn,
                    user: { communicationUserId: id }
                };
                return attachHttpResponse(results, _response);
            }
            catch (e) {
                span.setStatus({
                    code: api.CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Revokes all data and tokens created for a user.
     *
     * @param {CommunicationUser} user The user whose tokens are being revoked.
     * @param {Date} tokensValidFrom Tokens issued before this time will be revoked.
     * @param {OperationOptions} [options={}] Additional options for the request.
     */
    revokeTokens(user, tokensValidFrom = new Date(), options = {}) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const { span, updatedOptions } = createSpan("CommunicationIdentity-revokeTokens", options);
            try {
                const { _response } = yield this.client.update(user.communicationUserId, {
                    tokensValidFrom
                }, coreHttp.operationOptionsToRequestOptionsBase(updatedOptions));
                return attachHttpResponse({}, _response);
            }
            catch (e) {
                span.setStatus({
                    code: api.CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Creates a single user.
     *
     * @param {OperationOptions} [options={}] Additional options for the request.
     */
    createUser(options = {}) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const { span, updatedOptions } = createSpan("CommunicationIdentity-createUser", options);
            try {
                const { id, _response } = yield this.client.create(coreHttp.operationOptionsToRequestOptionsBase(updatedOptions));
                const user = { communicationUserId: id };
                return attachHttpResponse(user, _response);
            }
            catch (e) {
                span.setStatus({
                    code: api.CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Triggers revocation event for user and deletes all its data.
     *
     * @param {CommunicationUser} user The user being deleted.
     * @param {OperationOptions} [options={}] Additional options for the request.
     */
    deleteUser(user, options = {}) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const { span, updatedOptions } = createSpan("CommunicationIdentity-deleteUser", options);
            try {
                const { _response } = yield this.client.delete(user.communicationUserId, coreHttp.operationOptionsToRequestOptionsBase(updatedOptions));
                return attachHttpResponse({}, _response);
            }
            catch (e) {
                span.setStatus({
                    code: api.CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const AcquiredPhoneNumbers = {
    type: {
        name: "Composite",
        className: "AcquiredPhoneNumbers",
        modelProperties: {
            phoneNumbers: {
                serializedName: "phoneNumbers",
                type: {
                    name: "Sequence",
                    element: {
                        type: { name: "Composite", className: "AcquiredPhoneNumber" }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AcquiredPhoneNumber = {
    type: {
        name: "Composite",
        className: "AcquiredPhoneNumber",
        modelProperties: {
            phoneNumber: {
                serializedName: "phoneNumber",
                required: true,
                type: {
                    name: "String"
                }
            },
            acquiredCapabilities: {
                serializedName: "acquiredCapabilities",
                required: true,
                type: {
                    name: "Sequence",
                    element: { type: { name: "String" } }
                }
            },
            availableCapabilities: {
                serializedName: "availableCapabilities",
                required: true,
                type: {
                    name: "Sequence",
                    element: { type: { name: "String" } }
                }
            },
            assignmentStatus: {
                serializedName: "assignmentStatus",
                type: {
                    name: "String"
                }
            },
            placeName: {
                serializedName: "placeName",
                type: {
                    name: "String"
                }
            },
            activationState: {
                serializedName: "activationState",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorBody"
                }
            }
        }
    }
};
const ErrorBody = {
    type: {
        name: "Composite",
        className: "ErrorBody",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const LocationOptionsQueries = {
    type: {
        name: "Composite",
        className: "LocationOptionsQueries",
        modelProperties: {
            locationOptions: {
                serializedName: "locationOptions",
                type: {
                    name: "Sequence",
                    element: {
                        type: { name: "Composite", className: "LocationOptionsQuery" }
                    }
                }
            }
        }
    }
};
const LocationOptionsQuery = {
    type: {
        name: "Composite",
        className: "LocationOptionsQuery",
        modelProperties: {
            labelId: {
                serializedName: "labelId",
                type: {
                    name: "String"
                }
            },
            optionsValue: {
                serializedName: "optionsValue",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AreaCodes = {
    type: {
        name: "Composite",
        className: "AreaCodes",
        modelProperties: {
            primaryAreaCodes: {
                serializedName: "primaryAreaCodes",
                type: {
                    name: "Sequence",
                    element: { type: { name: "String" } }
                }
            },
            secondaryAreaCodes: {
                serializedName: "secondaryAreaCodes",
                type: {
                    name: "Sequence",
                    element: { type: { name: "String" } }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const UpdatePhoneNumberCapabilitiesResponse = {
    type: {
        name: "Composite",
        className: "UpdatePhoneNumberCapabilitiesResponse",
        modelProperties: {
            capabilitiesUpdateId: {
                serializedName: "capabilitiesUpdateId",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            capabilitiesUpdateStatus: {
                serializedName: "capabilitiesUpdateStatus",
                type: {
                    name: "String"
                }
            },
            phoneNumberCapabilitiesUpdates: {
                serializedName: "phoneNumberCapabilitiesUpdates",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "NumberUpdateCapabilities" }
                    }
                }
            }
        }
    }
};
const NumberUpdateCapabilities = {
    type: {
        name: "Composite",
        className: "NumberUpdateCapabilities",
        modelProperties: {
            add: {
                serializedName: "add",
                type: {
                    name: "Sequence",
                    element: { type: { name: "String" } }
                }
            },
            remove: {
                serializedName: "remove",
                type: {
                    name: "Sequence",
                    element: { type: { name: "String" } }
                }
            }
        }
    }
};
const UpdateNumberCapabilitiesRequest = {
    type: {
        name: "Composite",
        className: "UpdateNumberCapabilitiesRequest",
        modelProperties: {
            phoneNumberCapabilitiesUpdate: {
                serializedName: "phoneNumberCapabilitiesUpdate",
                required: true,
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "NumberUpdateCapabilities" }
                    }
                }
            }
        }
    }
};
const UpdateNumberCapabilitiesResponse = {
    type: {
        name: "Composite",
        className: "UpdateNumberCapabilitiesResponse",
        modelProperties: {
            capabilitiesUpdateId: {
                serializedName: "capabilitiesUpdateId",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PhoneNumberCountries = {
    type: {
        name: "Composite",
        className: "PhoneNumberCountries",
        modelProperties: {
            countries: {
                serializedName: "countries",
                type: {
                    name: "Sequence",
                    element: {
                        type: { name: "Composite", className: "PhoneNumberCountry" }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PhoneNumberCountry = {
    type: {
        name: "Composite",
        className: "PhoneNumberCountry",
        modelProperties: {
            localizedName: {
                serializedName: "localizedName",
                required: true,
                type: {
                    name: "String"
                }
            },
            countryCode: {
                serializedName: "countryCode",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const NumberConfigurationPhoneNumber = {
    type: {
        name: "Composite",
        className: "NumberConfigurationPhoneNumber",
        modelProperties: {
            phoneNumber: {
                serializedName: "phoneNumber",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const NumberConfigurationResponse = {
    type: {
        name: "Composite",
        className: "NumberConfigurationResponse",
        modelProperties: {
            pstnConfiguration: {
                serializedName: "pstnConfiguration",
                type: {
                    name: "Composite",
                    className: "PstnConfiguration"
                }
            }
        }
    }
};
const PstnConfiguration = {
    type: {
        name: "Composite",
        className: "PstnConfiguration",
        modelProperties: {
            callbackUrl: {
                serializedName: "callbackUrl",
                required: true,
                type: {
                    name: "String"
                }
            },
            applicationId: {
                serializedName: "applicationId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const NumberConfiguration = {
    type: {
        name: "Composite",
        className: "NumberConfiguration",
        modelProperties: {
            pstnConfiguration: {
                serializedName: "pstnConfiguration",
                type: {
                    name: "Composite",
                    className: "PstnConfiguration"
                }
            },
            phoneNumber: {
                serializedName: "phoneNumber",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PhonePlanGroups = {
    type: {
        name: "Composite",
        className: "PhonePlanGroups",
        modelProperties: {
            phonePlanGroups: {
                serializedName: "phonePlanGroups",
                type: {
                    name: "Sequence",
                    element: { type: { name: "Composite", className: "PhonePlanGroup" } }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PhonePlanGroup = {
    type: {
        name: "Composite",
        className: "PhonePlanGroup",
        modelProperties: {
            phonePlanGroupId: {
                serializedName: "phonePlanGroupId",
                required: true,
                type: {
                    name: "String"
                }
            },
            phoneNumberType: {
                serializedName: "phoneNumberType",
                type: {
                    name: "String"
                }
            },
            localizedName: {
                serializedName: "localizedName",
                required: true,
                type: {
                    name: "String"
                }
            },
            localizedDescription: {
                serializedName: "localizedDescription",
                required: true,
                type: {
                    name: "String"
                }
            },
            carrierDetails: {
                serializedName: "carrierDetails",
                type: {
                    name: "Composite",
                    className: "CarrierDetails"
                }
            },
            rateInformation: {
                serializedName: "rateInformation",
                type: {
                    name: "Composite",
                    className: "RateInformation"
                }
            }
        }
    }
};
const CarrierDetails = {
    type: {
        name: "Composite",
        className: "CarrierDetails",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            localizedName: {
                serializedName: "localizedName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RateInformation = {
    type: {
        name: "Composite",
        className: "RateInformation",
        modelProperties: {
            monthlyRate: {
                serializedName: "monthlyRate",
                type: {
                    name: "Number"
                }
            },
            currencyType: {
                defaultValue: "USD",
                isConstant: true,
                serializedName: "currencyType",
                type: {
                    name: "String"
                }
            },
            rateErrorMessage: {
                serializedName: "rateErrorMessage",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PhonePlansResponse = {
    type: {
        name: "Composite",
        className: "PhonePlansResponse",
        modelProperties: {
            phonePlans: {
                serializedName: "phonePlans",
                type: {
                    name: "Sequence",
                    element: { type: { name: "Composite", className: "PhonePlan" } }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PhonePlan = {
    type: {
        name: "Composite",
        className: "PhonePlan",
        modelProperties: {
            phonePlanId: {
                serializedName: "phonePlanId",
                required: true,
                type: {
                    name: "String"
                }
            },
            localizedName: {
                serializedName: "localizedName",
                required: true,
                type: {
                    name: "String"
                }
            },
            locationType: {
                serializedName: "locationType",
                required: true,
                type: {
                    name: "String"
                }
            },
            areaCodes: {
                serializedName: "areaCodes",
                type: {
                    name: "Sequence",
                    element: { type: { name: "String" } }
                }
            },
            capabilities: {
                serializedName: "capabilities",
                type: {
                    name: "Sequence",
                    element: { type: { name: "String" } }
                }
            },
            maximumSearchSize: {
                serializedName: "maximumSearchSize",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const LocationOptionsResponse = {
    type: {
        name: "Composite",
        className: "LocationOptionsResponse",
        modelProperties: {
            locationOptions: {
                serializedName: "locationOptions",
                type: {
                    name: "Composite",
                    className: "LocationOptions"
                }
            }
        }
    }
};
const LocationOptions = {
    type: {
        name: "Composite",
        className: "LocationOptions",
        modelProperties: {
            labelId: {
                serializedName: "labelId",
                type: {
                    name: "String"
                }
            },
            labelName: {
                serializedName: "labelName",
                type: {
                    name: "String"
                }
            },
            options: {
                serializedName: "options",
                type: {
                    name: "Sequence",
                    element: {
                        type: { name: "Composite", className: "LocationOptionsDetails" }
                    }
                }
            }
        }
    }
};
const LocationOptionsDetails = {
    type: {
        name: "Composite",
        className: "LocationOptionsDetails",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            },
            locationOptions: {
                serializedName: "locationOptions",
                type: {
                    name: "Sequence",
                    element: { type: { name: "Composite", className: "LocationOptions" } }
                }
            }
        }
    }
};
const PhoneNumberRelease = {
    type: {
        name: "Composite",
        className: "PhoneNumberRelease",
        modelProperties: {
            releaseId: {
                serializedName: "releaseId",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            errorMessage: {
                serializedName: "errorMessage",
                type: {
                    name: "String"
                }
            },
            phoneNumberReleaseStatusDetails: {
                serializedName: "phoneNumberReleaseStatusDetails",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "PhoneNumberReleaseDetails" }
                    }
                }
            }
        }
    }
};
const PhoneNumberReleaseDetails = {
    type: {
        name: "Composite",
        className: "PhoneNumberReleaseDetails",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "errorCode",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ReleaseRequest = {
    type: {
        name: "Composite",
        className: "ReleaseRequest",
        modelProperties: {
            phoneNumbers: {
                serializedName: "phoneNumbers",
                required: true,
                type: {
                    name: "Sequence",
                    element: { type: { name: "String" } }
                }
            }
        }
    }
};
const ReleaseResponse = {
    type: {
        name: "Composite",
        className: "ReleaseResponse",
        modelProperties: {
            releaseId: {
                serializedName: "releaseId",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PhoneNumberEntities = {
    type: {
        name: "Composite",
        className: "PhoneNumberEntities",
        modelProperties: {
            entities: {
                serializedName: "entities",
                type: {
                    name: "Sequence",
                    element: {
                        type: { name: "Composite", className: "PhoneNumberEntity" }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PhoneNumberEntity = {
    type: {
        name: "Composite",
        className: "PhoneNumberEntity",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            quantity: {
                serializedName: "quantity",
                type: {
                    name: "Number"
                }
            },
            quantityObtained: {
                serializedName: "quantityObtained",
                type: {
                    name: "Number"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            focDate: {
                serializedName: "focDate",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const PhoneNumberReservation = {
    type: {
        name: "Composite",
        className: "PhoneNumberReservation",
        modelProperties: {
            reservationId: {
                serializedName: "searchId",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            phonePlanIds: {
                serializedName: "phonePlanIds",
                type: {
                    name: "Sequence",
                    element: { type: { name: "String" } }
                }
            },
            areaCode: {
                serializedName: "areaCode",
                type: {
                    name: "String"
                }
            },
            quantity: {
                serializedName: "quantity",
                type: {
                    name: "Number"
                }
            },
            locationOptions: {
                serializedName: "locationOptions",
                type: {
                    name: "Sequence",
                    element: {
                        type: { name: "Composite", className: "LocationOptionsDetails" }
                    }
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            phoneNumbers: {
                serializedName: "phoneNumbers",
                type: {
                    name: "Sequence",
                    element: { type: { name: "String" } }
                }
            },
            reservationExpiryDate: {
                serializedName: "reservationExpiryDate",
                type: {
                    name: "DateTime"
                }
            },
            errorCode: {
                serializedName: "errorCode",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const CreateSearchOptions = {
    type: {
        name: "Composite",
        className: "CreateSearchOptions",
        modelProperties: {
            displayName: {
                constraints: {
                    MaxLength: 255
                },
                serializedName: "displayName",
                required: true,
                type: {
                    name: "String"
                }
            },
            description: {
                constraints: {
                    MaxLength: 255
                },
                serializedName: "description",
                required: true,
                type: {
                    name: "String"
                }
            },
            phonePlanIds: {
                serializedName: "phonePlanIds",
                required: true,
                type: {
                    name: "Sequence",
                    element: { type: { name: "String" } }
                }
            },
            areaCode: {
                serializedName: "areaCode",
                required: true,
                type: {
                    name: "String"
                }
            },
            quantity: {
                constraints: {
                    InclusiveMaximum: 2147483647,
                    InclusiveMinimum: 1
                },
                serializedName: "quantity",
                type: {
                    name: "Number"
                }
            },
            locationOptions: {
                serializedName: "locationOptions",
                type: {
                    name: "Sequence",
                    element: {
                        type: { name: "Composite", className: "LocationOptionsDetails" }
                    }
                }
            }
        }
    }
};
const CreateSearchResponse = {
    type: {
        name: "Composite",
        className: "CreateSearchResponse",
        modelProperties: {
            searchId: {
                serializedName: "searchId",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};

var Mappers$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    AcquiredPhoneNumbers: AcquiredPhoneNumbers,
    AcquiredPhoneNumber: AcquiredPhoneNumber,
    ErrorResponse: ErrorResponse,
    ErrorBody: ErrorBody,
    LocationOptionsQueries: LocationOptionsQueries,
    LocationOptionsQuery: LocationOptionsQuery,
    AreaCodes: AreaCodes,
    UpdatePhoneNumberCapabilitiesResponse: UpdatePhoneNumberCapabilitiesResponse,
    NumberUpdateCapabilities: NumberUpdateCapabilities,
    UpdateNumberCapabilitiesRequest: UpdateNumberCapabilitiesRequest,
    UpdateNumberCapabilitiesResponse: UpdateNumberCapabilitiesResponse,
    PhoneNumberCountries: PhoneNumberCountries,
    PhoneNumberCountry: PhoneNumberCountry,
    NumberConfigurationPhoneNumber: NumberConfigurationPhoneNumber,
    NumberConfigurationResponse: NumberConfigurationResponse,
    PstnConfiguration: PstnConfiguration,
    NumberConfiguration: NumberConfiguration,
    PhonePlanGroups: PhonePlanGroups,
    PhonePlanGroup: PhonePlanGroup,
    CarrierDetails: CarrierDetails,
    RateInformation: RateInformation,
    PhonePlansResponse: PhonePlansResponse,
    PhonePlan: PhonePlan,
    LocationOptionsResponse: LocationOptionsResponse,
    LocationOptions: LocationOptions,
    LocationOptionsDetails: LocationOptionsDetails,
    PhoneNumberRelease: PhoneNumberRelease,
    PhoneNumberReleaseDetails: PhoneNumberReleaseDetails,
    ReleaseRequest: ReleaseRequest,
    ReleaseResponse: ReleaseResponse,
    PhoneNumberEntities: PhoneNumberEntities,
    PhoneNumberEntity: PhoneNumberEntity,
    PhoneNumberReservation: PhoneNumberReservation,
    CreateSearchOptions: CreateSearchOptions,
    CreateSearchResponse: CreateSearchResponse
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const endpoint$1 = {
    parameterPath: "endpoint",
    mapper: {
        serializedName: "endpoint",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const locale = {
    parameterPath: ["options", "locale"],
    mapper: {
        defaultValue: "en-US",
        serializedName: "locale",
        type: {
            name: "String"
        }
    }
};
const skip = {
    parameterPath: ["options", "skip"],
    mapper: {
        serializedName: "skip",
        type: {
            name: "Number"
        }
    }
};
const take = {
    parameterPath: ["options", "take"],
    mapper: {
        defaultValue: 100,
        serializedName: "take",
        type: {
            name: "Number"
        }
    }
};
const apiVersion$1 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2020-07-20-preview1",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const contentType$1 = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const body$1 = {
    parameterPath: "body",
    mapper: LocationOptionsQueries
};
const locationType = {
    parameterPath: "locationType",
    mapper: {
        serializedName: "locationType",
        required: true,
        type: {
            name: "String"
        }
    }
};
const countryCode = {
    parameterPath: "countryCode",
    mapper: {
        serializedName: "countryCode",
        required: true,
        type: {
            name: "String"
        }
    }
};
const phonePlanId = {
    parameterPath: "phonePlanId",
    mapper: {
        serializedName: "phonePlanId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const capabilitiesUpdateId = {
    parameterPath: "capabilitiesUpdateId",
    mapper: {
        serializedName: "capabilitiesUpdateId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const body1$1 = {
    parameterPath: "body",
    mapper: UpdateNumberCapabilitiesRequest
};
const body2 = {
    parameterPath: "body",
    mapper: NumberConfigurationPhoneNumber
};
const body3 = {
    parameterPath: "body",
    mapper: NumberConfiguration
};
const includeRateInformation = {
    parameterPath: ["options", "includeRateInformation"],
    mapper: {
        serializedName: "includeRateInformation",
        type: {
            name: "Boolean"
        }
    }
};
const phonePlanGroupId = {
    parameterPath: "phonePlanGroupId",
    mapper: {
        serializedName: "phonePlanGroupId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const phonePlanId1 = {
    parameterPath: "phonePlanId",
    mapper: {
        serializedName: "phonePlanId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const releaseId = {
    parameterPath: "releaseId",
    mapper: {
        serializedName: "releaseId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const body4 = {
    parameterPath: "body",
    mapper: ReleaseRequest
};
const searchId = {
    parameterPath: "searchId",
    mapper: {
        serializedName: "searchId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const body5 = {
    parameterPath: "body",
    mapper: CreateSearchOptions
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/**
 * Class representing a PhoneNumberAdministration.
 */
class PhoneNumberAdministration {
    /**
     * Initialize a new instance of the class PhoneNumberAdministration class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the list of the acquired phone numbers.
     * @param options The options parameters.
     */
    getAllPhoneNumbers(options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ options: operationOptions }, getAllPhoneNumbersOperationSpec);
    }
    /**
     * Gets a list of the supported area codes
     * @param locationType The type of location information required by the plan.
     * @param countryCode The ISO 3166-2 country code
     * @param phonePlanId The plan id from which to search area codes.
     * @param body Location options for when location type is selection.
     * @param options The options parameters.
     */
    getAllAreaCodes(locationType, countryCode, phonePlanId, body, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({
            locationType,
            countryCode,
            phonePlanId,
            body,
            options: operationOptions
        }, getAllAreaCodesOperationSpec);
    }
    /**
     * Get capabilities by capabilities update id.
     * @param capabilitiesUpdateId
     * @param options The options parameters.
     */
    getCapabilitiesUpdate(capabilitiesUpdateId, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ capabilitiesUpdateId, options: operationOptions }, getCapabilitiesUpdateOperationSpec);
    }
    /**
     * Adds or removes phone number capabilities
     * @param body Represents a numbers capabilities update request
     * @param options The options parameters.
     */
    updateCapabilities(body, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ body, options: operationOptions }, updateCapabilitiesOperationSpec);
    }
    /**
     * Gets a list of supported countries
     * @param options The options parameters.
     */
    getAllSupportedCountries(options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ options: operationOptions }, getAllSupportedCountriesOperationSpec);
    }
    /**
     * Endpoint for getting number configurations
     * @param body The phone number whose configuration is to be fetched
     * @param options The options parameters.
     */
    getNumberConfiguration(body, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ body, options: operationOptions }, getNumberConfigurationOperationSpec);
    }
    /**
     * Endpoint for configuring a pstn number
     * @param body Details of pstn number configuration of the given phoneNumber
     * @param options The options parameters.
     */
    configureNumber(body, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ body, options: operationOptions }, configureNumberOperationSpec);
    }
    /**
     * Endpoint for unconfiguring a pstn number by removing the configuration
     * @param body The phone number to un-configure
     * @param options The options parameters.
     */
    unconfigureNumber(body, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ body, options: operationOptions }, unconfigureNumberOperationSpec);
    }
    /**
     * Gets a list of phone plan groups for the given country
     * @param countryCode The ISO 3166-2 country code.
     * @param options The options parameters.
     */
    getPhonePlanGroups(countryCode, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ countryCode, options: operationOptions }, getPhonePlanGroupsOperationSpec);
    }
    /**
     * Gets a list of phone plans for a phone plan group
     * @param countryCode The ISO 3166-2 country code.
     * @param phonePlanGroupId
     * @param options The options parameters.
     */
    getPhonePlans(countryCode, phonePlanGroupId, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ countryCode, phonePlanGroupId, options: operationOptions }, getPhonePlansOperationSpec);
    }
    /**
     * Gets a list of location options for a phone plan
     * @param countryCode The ISO 3166-2 country code.
     * @param phonePlanGroupId
     * @param phonePlanId
     * @param options The options parameters.
     */
    getPhonePlanLocationOptions(countryCode, phonePlanGroupId, phonePlanId, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ countryCode, phonePlanGroupId, phonePlanId, options: operationOptions }, getPhonePlanLocationOptionsOperationSpec);
    }
    /**
     * Gets a release by a release id
     * @param releaseId Represents the release id
     * @param options The options parameters.
     */
    getReleaseById(releaseId, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ releaseId, options: operationOptions }, getReleaseByIdOperationSpec);
    }
    /**
     * Creates a release for the given phone numbers
     * @param body Config api Release request
     * @param options The options parameters.
     */
    releasePhoneNumbers(body, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ body, options: operationOptions }, releasePhoneNumbersOperationSpec);
    }
    /**
     * Gets a list of all releases
     * @param options The options parameters.
     */
    getAllReleases(options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ options: operationOptions }, getAllReleasesOperationSpec);
    }
    /**
     * Get search by search id
     * @param searchId The search id to be searched for
     * @param options The options parameters.
     */
    getSearchById(searchId, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ searchId, options: operationOptions }, getSearchByIdOperationSpec);
    }
    /**
     * Creates a phone number search
     * @param body Defines the search options
     * @param options The options parameters.
     */
    createSearch(body, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ body, options: operationOptions }, createSearchOperationSpec);
    }
    /**
     * Gets a list of all searches
     * @param options The options parameters.
     */
    getAllSearches(options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ options: operationOptions }, getAllSearchesOperationSpec);
    }
    /**
     * Cancels the search. This means existing numbers in the search will be made available.
     * @param searchId The search id to be canceled
     * @param options The options parameters.
     */
    cancelSearch(searchId, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ searchId, options: operationOptions }, cancelSearchOperationSpec);
    }
    /**
     * Purchases the phone number search.
     * @param searchId The search id to be purchased
     * @param options The options parameters.
     */
    purchaseSearch(searchId, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ searchId, options: operationOptions }, purchaseSearchOperationSpec);
    }
    /**
     * GetAllPhoneNumbersNext
     * @param nextLink The nextLink from the previous successful call to the GetAllPhoneNumbers method.
     * @param options The options parameters.
     */
    getAllPhoneNumbersNext(nextLink, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ nextLink, options: operationOptions }, getAllPhoneNumbersNextOperationSpec);
    }
    /**
     * GetAllSupportedCountriesNext
     * @param nextLink The nextLink from the previous successful call to the GetAllSupportedCountries
     *                 method.
     * @param options The options parameters.
     */
    getAllSupportedCountriesNext(nextLink, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ nextLink, options: operationOptions }, getAllSupportedCountriesNextOperationSpec);
    }
    /**
     * GetPhonePlanGroupsNext
     * @param countryCode The ISO 3166-2 country code.
     * @param nextLink The nextLink from the previous successful call to the GetPhonePlanGroups method.
     * @param options The options parameters.
     */
    getPhonePlanGroupsNext(countryCode, nextLink, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ countryCode, nextLink, options: operationOptions }, getPhonePlanGroupsNextOperationSpec);
    }
    /**
     * GetPhonePlansNext
     * @param countryCode The ISO 3166-2 country code.
     * @param phonePlanGroupId
     * @param nextLink The nextLink from the previous successful call to the GetPhonePlans method.
     * @param options The options parameters.
     */
    getPhonePlansNext(countryCode, phonePlanGroupId, nextLink, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ countryCode, phonePlanGroupId, nextLink, options: operationOptions }, getPhonePlansNextOperationSpec);
    }
    /**
     * GetAllReleasesNext
     * @param nextLink The nextLink from the previous successful call to the GetAllReleases method.
     * @param options The options parameters.
     */
    getAllReleasesNext(nextLink, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ nextLink, options: operationOptions }, getAllReleasesNextOperationSpec);
    }
    /**
     * GetAllSearchesNext
     * @param nextLink The nextLink from the previous successful call to the GetAllSearches method.
     * @param options The options parameters.
     */
    getAllSearchesNext(nextLink, options) {
        const operationOptions = coreHttp.operationOptionsToRequestOptionsBase(options || {});
        return this.client.sendOperationRequest({ nextLink, options: operationOptions }, getAllSearchesNextOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = new coreHttp.Serializer(Mappers$1, /* isXml */ false);
const getAllPhoneNumbersOperationSpec = {
    path: "/administration/phonenumbers/phonenumbers",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AcquiredPhoneNumbers
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [locale, skip, take, apiVersion$1],
    urlParameters: [endpoint$1],
    serializer: serializer$1
};
const getAllAreaCodesOperationSpec = {
    path: "/administration/phonenumbers/countries/{countryCode}/areacodes",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: AreaCodes
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: body$1,
    queryParameters: [apiVersion$1, locationType, phonePlanId],
    urlParameters: [endpoint$1, countryCode],
    headerParameters: [contentType$1],
    mediaType: "json",
    serializer: serializer$1
};
const getCapabilitiesUpdateOperationSpec = {
    path: "/administration/phonenumbers/capabilities/{capabilitiesUpdateId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: UpdatePhoneNumberCapabilitiesResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion$1],
    urlParameters: [endpoint$1, capabilitiesUpdateId],
    serializer: serializer$1
};
const updateCapabilitiesOperationSpec = {
    path: "/administration/phonenumbers/capabilities",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: UpdateNumberCapabilitiesResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: body1$1,
    queryParameters: [apiVersion$1],
    urlParameters: [endpoint$1],
    headerParameters: [contentType$1],
    mediaType: "json",
    serializer: serializer$1
};
const getAllSupportedCountriesOperationSpec = {
    path: "/administration/phonenumbers/countries",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PhoneNumberCountries
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [locale, skip, take, apiVersion$1],
    urlParameters: [endpoint$1],
    serializer: serializer$1
};
const getNumberConfigurationOperationSpec = {
    path: "/administration/phonenumbers/numberconfiguration",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: NumberConfigurationResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: body2,
    queryParameters: [apiVersion$1],
    urlParameters: [endpoint$1],
    headerParameters: [contentType$1],
    mediaType: "json",
    serializer: serializer$1
};
const configureNumberOperationSpec = {
    path: "/administration/phonenumbers/numberconfiguration/configure",
    httpMethod: "PATCH",
    responses: {
        200: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: body3,
    queryParameters: [apiVersion$1],
    urlParameters: [endpoint$1],
    headerParameters: [contentType$1],
    mediaType: "json",
    serializer: serializer$1
};
const unconfigureNumberOperationSpec = {
    path: "/administration/phonenumbers/numberconfiguration/unconfigure",
    httpMethod: "PATCH",
    responses: {
        200: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: body2,
    queryParameters: [apiVersion$1],
    urlParameters: [endpoint$1],
    headerParameters: [contentType$1],
    mediaType: "json",
    serializer: serializer$1
};
const getPhonePlanGroupsOperationSpec = {
    path: "/administration/phonenumbers/countries/{countryCode}/phoneplangroups",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PhonePlanGroups
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        locale,
        skip,
        take,
        apiVersion$1,
        includeRateInformation
    ],
    urlParameters: [endpoint$1, countryCode],
    serializer: serializer$1
};
const getPhonePlansOperationSpec = {
    path: "/administration/phonenumbers/countries/{countryCode}/phoneplangroups/{phonePlanGroupId}/phoneplans",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PhonePlansResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [locale, skip, take, apiVersion$1],
    urlParameters: [endpoint$1, countryCode, phonePlanGroupId],
    serializer: serializer$1
};
const getPhonePlanLocationOptionsOperationSpec = {
    path: "/administration/phonenumbers/countries/{countryCode}/phoneplangroups/{phonePlanGroupId}/phoneplans/{phonePlanId}/locationoptions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LocationOptionsResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [locale, apiVersion$1],
    urlParameters: [
        endpoint$1,
        countryCode,
        phonePlanGroupId,
        phonePlanId1
    ],
    serializer: serializer$1
};
const getReleaseByIdOperationSpec = {
    path: "/administration/phonenumbers/releases/{releaseId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PhoneNumberRelease
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion$1],
    urlParameters: [endpoint$1, releaseId],
    serializer: serializer$1
};
const releasePhoneNumbersOperationSpec = {
    path: "/administration/phonenumbers/releases",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ReleaseResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: body4,
    queryParameters: [apiVersion$1],
    urlParameters: [endpoint$1],
    headerParameters: [contentType$1],
    mediaType: "json",
    serializer: serializer$1
};
const getAllReleasesOperationSpec = {
    path: "/administration/phonenumbers/releases",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PhoneNumberEntities
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [skip, take, apiVersion$1],
    urlParameters: [endpoint$1],
    serializer: serializer$1
};
const getSearchByIdOperationSpec = {
    path: "/administration/phonenumbers/searches/{searchId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PhoneNumberReservation
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion$1],
    urlParameters: [endpoint$1, searchId],
    serializer: serializer$1
};
const createSearchOperationSpec = {
    path: "/administration/phonenumbers/searches",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: CreateSearchResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: body5,
    queryParameters: [apiVersion$1],
    urlParameters: [endpoint$1],
    headerParameters: [contentType$1],
    mediaType: "json",
    serializer: serializer$1
};
const getAllSearchesOperationSpec = {
    path: "/administration/phonenumbers/searches",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PhoneNumberEntities
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [skip, take, apiVersion$1],
    urlParameters: [endpoint$1],
    serializer: serializer$1
};
const cancelSearchOperationSpec = {
    path: "/administration/phonenumbers/searches/{searchId}/cancel",
    httpMethod: "POST",
    responses: {
        202: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion$1],
    urlParameters: [endpoint$1, searchId],
    serializer: serializer$1
};
const purchaseSearchOperationSpec = {
    path: "/administration/phonenumbers/searches/{searchId}/purchase",
    httpMethod: "POST",
    responses: {
        202: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion$1],
    urlParameters: [endpoint$1, searchId],
    serializer: serializer$1
};
const getAllPhoneNumbersNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AcquiredPhoneNumbers
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [locale, skip, take, apiVersion$1],
    urlParameters: [endpoint$1, nextLink],
    serializer: serializer$1
};
const getAllSupportedCountriesNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PhoneNumberCountries
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [locale, skip, take, apiVersion$1],
    urlParameters: [endpoint$1, nextLink],
    serializer: serializer$1
};
const getPhonePlanGroupsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PhonePlanGroups
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        locale,
        skip,
        take,
        apiVersion$1,
        includeRateInformation
    ],
    urlParameters: [endpoint$1, countryCode, nextLink],
    serializer: serializer$1
};
const getPhonePlansNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PhonePlansResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [locale, skip, take, apiVersion$1],
    urlParameters: [
        endpoint$1,
        countryCode,
        phonePlanGroupId,
        nextLink
    ],
    serializer: serializer$1
};
const getAllReleasesNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PhoneNumberEntities
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [skip, take, apiVersion$1],
    urlParameters: [endpoint$1, nextLink],
    serializer: serializer$1
};
const getAllSearchesNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PhoneNumberEntities
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [skip, take, apiVersion$1],
    urlParameters: [endpoint$1, nextLink],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const packageName$1 = "azure-communication-administration-phoneNumber";
const packageVersion$1 = "1.0.0-beta.4";
class PhoneNumberRestClientContext extends coreHttp.ServiceClient {
    /**
     * Initializes a new instance of the PhoneNumberRestClientContext class.
     * @param endpoint The endpoint of the Azure Communication resource.
     * @param options The parameter options
     */
    constructor(endpoint, options) {
        if (endpoint === undefined) {
            throw new Error("'endpoint' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        if (!options.userAgent) {
            const defaultUserAgent = coreHttp.getDefaultUserAgentValue();
            options.userAgent = `${packageName$1}/${packageVersion$1} ${defaultUserAgent}`;
        }
        super(undefined, options);
        this.requestContentType = "application/json; charset=utf-8";
        this.baseUri = options.endpoint || "{endpoint}";
        // Parameter assignments
        this.endpoint = endpoint;
        // Assigning values to Constant parameters
        this.apiVersion = options.apiVersion || "2020-07-20-preview1";
    }
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class PhoneNumberRestClient extends PhoneNumberRestClientContext {
    /**
     * Initializes a new instance of the PhoneNumberRestClient class.
     * @param endpoint The endpoint of the Azure Communication resource.
     * @param options The parameter options
     */
    constructor(endpoint, options) {
        super(endpoint, options);
        this.phoneNumberAdministration = new PhoneNumberAdministration(this);
    }
}

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const SDK_VERSION$1 = "1.0.0-beta.4";

// Copyright (c) Microsoft Corporation.
/**
 * Common properties and methods of the phone number pollers.
 */
class PhoneNumberPollerBase extends coreLro.Poller {
    constructor() {
        super(...arguments);
        /**
         * Defines how much time the poller is going to wait before making a new request to the service.
         */
        this.pollInterval = 2000;
    }
    /**
     * The method used by the poller to wait before attempting to update its operation
     */
    delay() {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            return coreHttp.delay(this.pollInterval);
        });
    }
}
/**
 * Common properties and methods of the phone number poller operations.
 */
class PhoneNumberPollOperationBase {
    /**
     * Initializes a new instance of the phone number poll operation
     *
     * @param {TState} state The state of the poll operation
     * @param {string} cancelMessage A message to dispaly when a poll operation is cancelled.
     */
    constructor(state, cancelMessage = "Canceling not supported.") {
        this.state = state;
        this.cancelMessage = cancelMessage;
    }
    /**
     * Reaches to the service and updates the Poller operation.
     */
    update() {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            throw new Error("Operation not supported");
        });
    }
    /**
     * Reaches to the service and cancels the Poller operation and the underlying request.
     */
    cancel() {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            throw new Error(this.cancelMessage);
        });
    }
    /**
     * @summary Serializes the Poller operation.
     */
    toString() {
        return JSON.stringify({
            state: this.state
        });
    }
}
/**
 * Common properties and methods of the phone number reservation poller operations.
 */
class PhoneNumberReservationPollOperationBase {
    /**
     * Initializes a new instance of the phone number reservation poll operation
     *
     * @param {TState} state The state of the poll operation
     * @param {PhoneNumberAdministration} client A reference to the generated client used to make requests internally.
     * @param {string} cancelMessage A message to dispaly when a poll operation is cancelled.
     */
    constructor(state, client, cancelMessage = "Canceling not supported.") {
        this.state = state;
        this.client = client;
        this.cancelMessage = cancelMessage;
    }
    /**
     * Gets the reservation associated with a given id.
     *
     * @param {string} reservationId The id of the reservation to fetch.
     * @param {GetReservationOptions} options Additional request options.
     */
    getReservation(reservationId, options = {}) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-getReservation", options);
            try {
                const _a = yield this.client.getSearchById(reservationId, coreHttp.operationOptionsToRequestOptionsBase(updatedOptions)), { _response } = _a, rest = tslib.__rest(_a, ["_response"]);
                return attachHttpResponse(rest, _response);
            }
            catch (e) {
                span.setStatus({
                    code: api.CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Cancels the reservation associated with a given id.
     *
     * @param {string} reservationId The id of the reservation to cancel.
     * @param {CancelReservationOptions} options Additional request options.
     */
    cancelReservation(reservationId, options = {}) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-cancelReservation", options);
            try {
                const { _response } = yield this.client.cancelSearch(reservationId, coreHttp.operationOptionsToRequestOptionsBase(updatedOptions));
                return attachHttpResponse({}, _response);
            }
            catch (e) {
                span.setStatus({
                    code: api.CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Reaches to the service and updates the Poller operation.
     */
    update() {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            throw new Error("Operation not supported");
        });
    }
    /**
     * Reaches to the service and cancels the Poller operation and the underlying request.
     */
    cancel() {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            throw new Error(this.cancelMessage);
        });
    }
    /**
     * @summary Serializes the Poller operation.
     */
    toString() {
        return JSON.stringify({
            state: this.state
        });
    }
}

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const isComplete = (results, completionStatus) => {
    if (results.status === "Error" || results.status === "Failed" || results.status === "Expired") {
        throw new Error(JSON.stringify(results));
    }
    return results.status === completionStatus;
};

// Copyright (c) Microsoft Corporation.
/**
 * The poll operation for releasing a phone number or list of phone numbers.
 */
class ReleasePhoneNumbersPollOperation extends PhoneNumberPollOperationBase {
    /**
     * Initializes an instance of PurchaseReservationPollOperation
     *
     * @param {ReleasePhoneNumbersPollOperationState} state The state of the poll operation
     * @param {PhoneNumberAdministration} client A reference to the generated client used to make requests internally.
     * @param {OperationOptions} requestOptions Additional options for the underlying requests.
     */
    constructor(state, client, requestOptions) {
        super(state, "Canceling a release is not supported.");
        this.state = state;
        this.client = client;
        this.requestOptions = requestOptions;
    }
    /**
     * Request the release of a list of acquired phone numbers.
     *
     * @param {string[]} phoneNumbers The phone numbers to be released.
     * @param {ReleasePhoneNumbersOptions} options Additional request options.
     */
    releasePhoneNumbers(phoneNumbers, options = {}) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-releasePhoneNumbers", options);
            try {
                const { releaseId, _response } = yield this.client.releasePhoneNumbers({
                    phoneNumbers
                }, coreHttp.operationOptionsToRequestOptionsBase(updatedOptions));
                return attachHttpResponse({ releaseId }, _response);
            }
            catch (e) {
                span.setStatus({
                    code: api.CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Gets the release associated with a given id.
     *
     * @param {string} releaseId The id of the release returned by releasePhoneNumbers.
     * @param {GetReleaseOptions} options Additional request options.
     */
    getRelease(releaseId, options = {}) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-getRelease", options);
            try {
                const _a = yield this.client.getReleaseById(releaseId, coreHttp.operationOptionsToRequestOptionsBase(updatedOptions)), { _response } = _a, rest = tslib.__rest(_a, ["_response"]);
                return attachHttpResponse(rest, _response);
            }
            catch (e) {
                span.setStatus({
                    code: api.CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Reaches to the service and queries the status of the operation.
     *
     * @param {UpdatePollerOptions<ReleasePhoneNumbersPollOperationState>} [options={}] Additional options for the poll operation
     */
    update(options = {}) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const { state } = this;
            const { phoneNumbers } = state;
            if (options.abortSignal) {
                this.requestOptions.abortSignal = options.abortSignal;
            }
            try {
                if (!state.isStarted) {
                    const { releaseId } = yield this.releasePhoneNumbers(phoneNumbers, this.requestOptions);
                    state.releaseId = releaseId;
                    state.isStarted = true;
                }
                if (!state.isCompleted && state.releaseId) {
                    state.result = yield this.getRelease(state.releaseId, this.requestOptions);
                    state.isCompleted = isComplete(state.result, "Complete");
                }
            }
            catch (error) {
                state.error = error;
                state.isCompleted = true;
            }
            finally {
                return this;
            }
        });
    }
}

// Copyright (c) Microsoft Corporation.
/**
 * The poller for release a phone number or list of phone numbers.
 */
class ReleasePhoneNumbersPoller extends PhoneNumberPollerBase {
    /**
     * Initializes an instance of ReleasePhoneNumbersPoller
     *
     * @param {ReleasePhoneNumbersPollerOptions} options Options for initializing the poller.
     */
    constructor(options) {
        const { client, phoneNumbers, requestOptions = {}, pollInterval = 2000, resumeFrom } = options;
        let state;
        if (resumeFrom) {
            state = JSON.parse(resumeFrom).state;
        }
        const operation = new ReleasePhoneNumbersPollOperation(Object.assign(Object.assign({}, state), { phoneNumbers }), client, requestOptions);
        super(operation);
        this.pollInterval = pollInterval;
    }
}

// Copyright (c) Microsoft Corporation.
/**
 * The poll operation for reserving phone numbers.
 */
class ReservePhoneNumbersPollOperation extends PhoneNumberReservationPollOperationBase {
    /**
     * Initializes an instance of ReservePhoneNumbersPollOperation
     *
     * @param {PurchaseReservationPollOperationState} state The state of the poll operation
     * @param {PhoneNumberAdministration} _client A reference to the generated client used to make requests internally.
     * @param {OperationOptions} requestOptions Additional options for the underlying requests.
     */
    constructor(state, _client, requestOptions) {
        super(state, _client);
        this.state = state;
        this._client = _client;
        this.requestOptions = requestOptions;
    }
    /**
     * Starts a search for phone numbers given some constraints such as name or area code. The phone numbers that are
     * found will then be reserved.
     *
     * @param {CreateReservationRequest} reservationRequest Request properties to constraint the search scope.
     * @param {CreateReservationOptions} options Additional request options.
     */
    createReservation(reservationRequest, options = {}) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const { name, description, phonePlanIds, areaCode, quantity } = reservationRequest;
            const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-createReservation", options);
            try {
                const { searchId, _response } = yield this._client.createSearch({
                    displayName: name,
                    description,
                    phonePlanIds,
                    quantity,
                    areaCode
                }, coreHttp.operationOptionsToRequestOptionsBase(updatedOptions));
                return attachHttpResponse({ reservationId: searchId }, _response);
            }
            catch (e) {
                span.setStatus({
                    code: api.CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Reaches to the service and queries the status of the operation.
     *
     * @param {UpdatePollerOptions<ReservePhoneNumbersPollOperationState>} [options={}] Additional options for the poll operation
     */
    update(options = {}) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const state = this.state;
            const { reservationRequest } = state;
            if (options.abortSignal) {
                this.requestOptions.abortSignal = options.abortSignal;
            }
            try {
                if (!state.isStarted) {
                    const { reservationId } = yield this.createReservation(reservationRequest, this.requestOptions);
                    state.reservationId = reservationId;
                    state.isStarted = true;
                }
                if (!state.isCompleted && state.reservationId) {
                    state.result = yield this.getReservation(state.reservationId, this.requestOptions);
                    state.isCompleted = isComplete(state.result, "Reserved");
                }
            }
            catch (error) {
                state.error = error;
                state.isCompleted = true;
            }
            finally {
                return this;
            }
        });
    }
    /**
     * Reaches to the service and cancels the operation, also updating the poll operation.
     */
    cancel() {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const state = this.state;
            const { reservationId, options = {} } = state;
            if (reservationId) {
                yield this.cancelReservation(reservationId, options);
            }
            state.isCancelled = true;
            return this;
        });
    }
}

// Copyright (c) Microsoft Corporation.
/**
 * The poller for reserving phone numbers.
 */
class ReservePhoneNumbersPoller extends PhoneNumberPollerBase {
    /**
     * Initializes an instance of ReservePhoneNumbersPoller
     *
     * @param {ReservePhoneNumbersPollerOptions} options Options for initializing the poller.
     */
    constructor(options) {
        const { client, reservationRequest, requestOptions = {}, pollInterval = 2000, resumeFrom } = options;
        let state;
        if (resumeFrom) {
            state = JSON.parse(resumeFrom).state;
        }
        const operation = new ReservePhoneNumbersPollOperation(Object.assign(Object.assign({}, state), { reservationRequest }), client, requestOptions);
        super(operation);
        this.pollInterval = pollInterval;
    }
}

// Copyright (c) Microsoft Corporation.
/**
 * The poll operation for purchasing a phone number reservation.
 */
class PurchaseReservationPollOperation extends PhoneNumberReservationPollOperationBase {
    /**
     * Initializes an instance of PurchaseReservationPollOperation
     *
     * @param {PurchaseReservationPollOperationState} state The state of the poll operation
     * @param {PhoneNumberAdministration} _client A reference to the generated client used to make requests internally.
     * @param {OperationOptions} requestOptions Additional options for the underlying requests.
     */
    constructor(state, _client, requestOptions) {
        super(state, _client);
        this.state = state;
        this._client = _client;
        this.requestOptions = requestOptions;
    }
    /**
     * Purchases the phone number(s) in the reservation associated with a given id.
     *
     * @param {string} reservationId The id of the reservation being purchased.
     * @param {PurchaseReservationOptions} options Additional request options.
     */
    purchaseReservation(reservationId, options = {}) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-purchaseReservation", options);
            try {
                const { _response } = yield this._client.purchaseSearch(reservationId, coreHttp.operationOptionsToRequestOptionsBase(updatedOptions));
                return attachHttpResponse({}, _response);
            }
            catch (e) {
                span.setStatus({
                    code: api.CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Reaches to the service and queries the status of the operation.
     *
     * @param {UpdatePollerOptions<PurchaseReservationPollOperationState>} [options={}] Additional options for the poll operation
     */
    update(options = {}) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const state = this.state;
            const { reservationId } = state;
            if (options.abortSignal) {
                this.requestOptions.abortSignal = options.abortSignal;
            }
            try {
                if (!state.isStarted) {
                    yield this.purchaseReservation(reservationId, this.requestOptions);
                    state.isStarted = true;
                }
                if (!state.isCompleted) {
                    const result = yield this.getReservation(reservationId, this.requestOptions);
                    state.isCompleted = isComplete(result, "Success");
                }
            }
            catch (error) {
                state.error = error;
                state.isCompleted = true;
            }
            finally {
                return this;
            }
        });
    }
    /**
     * Reaches to the service and cancels the operation, also updating the poll operation.
     */
    cancel() {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const state = this.state;
            const { reservationId, options = {} } = state;
            if (reservationId) {
                yield this.cancelReservation(reservationId, options);
            }
            state.isCancelled = true;
            return this;
        });
    }
}

// Copyright (c) Microsoft Corporation.
/**
 * The poller for purchasing a phone number reservation.
 */
class PurchaseReservationPoller extends PhoneNumberPollerBase {
    /**
     * Initializes an instance of PurchaseReservationPoller
     *
     * @param {PurchaseReservationPollerOptions} options Options for initializing the poller.
     */
    constructor(options) {
        const { client, reservationId, requestOptions = {}, pollInterval = 2000, resumeFrom } = options;
        let state;
        if (resumeFrom) {
            state = JSON.parse(resumeFrom).state;
        }
        const operation = new PurchaseReservationPollOperation(Object.assign(Object.assign({}, state), { reservationId }), client, requestOptions);
        super(operation);
        this.pollInterval = pollInterval;
    }
}

// Copyright (c) Microsoft Corporation.
const isPhoneNumberAdministrationClientOptions = (options) => options && !communicationCommon.isKeyCredential(options);
/**
 * Client class for interacting with Azure Communication Services PhoneNumber Administration.
 */
class PhoneNumberAdministrationClient {
    constructor(connectionStringOrUrl, credentialOrOptions, maybeOptions = {}) {
        const { url, credential } = communicationCommon.parseClientArguments(connectionStringOrUrl, credentialOrOptions);
        const options = isPhoneNumberAdministrationClientOptions(credentialOrOptions)
            ? credentialOrOptions
            : maybeOptions;
        const libInfo = `azsdk-js-communication-administration/${SDK_VERSION$1}`;
        if (!options.userAgentOptions) {
            options.userAgentOptions = {};
        }
        if (options.userAgentOptions.userAgentPrefix) {
            options.userAgentOptions.userAgentPrefix = `${options.userAgentOptions.userAgentPrefix} ${libInfo}`;
        }
        else {
            options.userAgentOptions.userAgentPrefix = libInfo;
        }
        const internalPipelineOptions = Object.assign(Object.assign({}, options), {
            loggingOptions: {
                logger: logger.info
            }
        });
        const authPolicy = communicationCommon.createCommunicationAuthPolicy(credential);
        const pipeline = coreHttp.createPipelineFromOptions(internalPipelineOptions, authPolicy);
        this.client = new PhoneNumberRestClient(url, pipeline).phoneNumberAdministration;
    }
    /**
     * Configures a phone number, for example to assign a callbackUrl.
     * @param config The configuration details
     * @param options Additional request options.
     */
    configurePhoneNumber(config, options = {}) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-configurePhoneNumber", options);
            const { phoneNumber, callbackUrl } = config;
            try {
                const { _response } = yield this.client.configureNumber({
                    phoneNumber,
                    pstnConfiguration: {
                        callbackUrl: callbackUrl,
                        applicationId: updatedOptions.applicationId
                    }
                }, coreHttp.operationOptionsToRequestOptionsBase(updatedOptions));
                return attachHttpResponse({}, _response);
            }
            catch (e) {
                span.setStatus({
                    code: api.CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Unconfigure a phone number, resetting its' configuration.
     * @param phoneNumber Phone Number to unconfigure.
     * @param options Additional request options.
     */
    unconfigurePhoneNumber(phoneNumber, options = {}) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-unconfigurePhoneNumber", options);
            try {
                const { _response } = yield this.client.unconfigureNumber({ phoneNumber }, coreHttp.operationOptionsToRequestOptionsBase(updatedOptions));
                return attachHttpResponse({}, _response);
            }
            catch (e) {
                span.setStatus({
                    code: api.CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Updates the capabilities for a list of phone numbers.
     * The response includes the id of the created update capabilities request,
     * remember that id for subsequent calls to getCapabilitiesUpdate.
     * @param phoneNumberCapabilitiesUpdates Dictionary containing a list of phone numbers and their capabilities updates.
     * @param options Additional request options.
     */
    updatePhoneNumbersCapabilities(phoneNumberCapabilitiesUpdates, options = {}) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-updatePhoneNumbersCapabilities", options);
            try {
                const { capabilitiesUpdateId, _response } = yield this.client.updateCapabilities({
                    phoneNumberCapabilitiesUpdate: phoneNumberCapabilitiesUpdates
                }, coreHttp.operationOptionsToRequestOptionsBase(updatedOptions));
                return attachHttpResponse({ capabilitiesUpdateId }, _response);
            }
            catch (e) {
                span.setStatus({
                    code: api.CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Get the update capabilities request associated with a given id.
     * @param capabilitiesUpdateId  The id associated with the request.
     * @param options Additional request options.
     */
    getCapabilitiesUpdate(capabilitiesUpdateId, options = {}) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-getCapabilitiesUpdate", options);
            try {
                const _a = yield this.client.getCapabilitiesUpdate(capabilitiesUpdateId, coreHttp.operationOptionsToRequestOptionsBase(updatedOptions)), { _response } = _a, rest = tslib.__rest(_a, ["_response"]);
                return attachHttpResponse(rest, _response);
            }
            catch (e) {
                span.setStatus({
                    code: api.CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Gets a list of the supported area codes based on location.
     * @param request Request properties to constraint the search scope.
     * @param options Additional request options.
     */
    getAreaCodes(request, options = {}) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const { countryCode: country, locationType, phonePlanId, locationOptionsQueries } = request;
            const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-getAllAreaCodes", options);
            try {
                const _a = yield this.client.getAllAreaCodes(locationType, country, phonePlanId, locationOptionsQueries, coreHttp.operationOptionsToRequestOptionsBase(updatedOptions)), { _response } = _a, rest = tslib.__rest(_a, ["_response"]);
                return attachHttpResponse(rest, _response);
            }
            catch (e) {
                span.setStatus({
                    code: api.CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Gets the configuration for a given phone number.
     * @param phoneNumber The E.164 representation of the phone number whose configuration is requested.
     * @param options Additional request options.
     */
    getPhoneNumberConfiguration(phoneNumber, options = {}) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-getPhoneNumberConfiguration", options);
            try {
                const { pstnConfiguration, _response } = yield this.client.getNumberConfiguration({ phoneNumber }, coreHttp.operationOptionsToRequestOptionsBase(updatedOptions));
                return attachHttpResponse({ pstnConfiguration }, _response);
            }
            catch (e) {
                span.setStatus({
                    code: api.CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Gets the location options for a given phone plan.
     * @param request Request properties to constraint the search scope.
     * @param options Additional request options.
     */
    getPhonePlanLocationOptions(request, options = {}) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-getPhonePlanLocationOptions", options);
            const { countryCode, phonePlanGroupId, phonePlanId } = request;
            try {
                const { locationOptions, _response } = yield this.client.getPhonePlanLocationOptions(countryCode, phonePlanGroupId, phonePlanId, coreHttp.operationOptionsToRequestOptionsBase(updatedOptions));
                return attachHttpResponse({ locationOptions }, _response);
            }
            catch (e) {
                span.setStatus({
                    code: api.CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Gets the reservation associated with a given id.
     * Use this function to query the status of a phone number reservation.
     * @param reservationId The id of the reservation returned by createReservation.
     * @param options Additional request options.
     */
    getReservation(reservationId, options = {}) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-getReservation", options);
            try {
                const _a = yield this.client.getSearchById(reservationId, coreHttp.operationOptionsToRequestOptionsBase(updatedOptions)), { _response } = _a, rest = tslib.__rest(_a, ["_response"]);
                return attachHttpResponse(rest, _response);
            }
            catch (e) {
                span.setStatus({
                    code: api.CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * Cancels the reservation associated with a given id.
     * @param reservationId The id of the reservation returned by createReservation.
     * @param options Additional request options.
     */
    cancelReservation(reservationId, options = {}) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-cancelReservation", options);
            try {
                const { _response } = yield this.client.cancelSearch(reservationId, coreHttp.operationOptionsToRequestOptionsBase(updatedOptions));
                return attachHttpResponse({}, _response);
            }
            catch (e) {
                span.setStatus({
                    code: api.CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
    /**
     * @internal
     * @ignore
     * Deals with the pagination of listSearches.
     * @param {PageSettings} continuationState An object that indicates the position of the paginated request.
     * @param {PageableOptions} [options] Optional parameters for the underlying HTTP request.
     */
    listSearchesPage(continuationState, options = {}) {
        return tslib.__asyncGenerator(this, arguments, function* listSearchesPage_1() {
            if (!continuationState.continuationToken) {
                const currentResponse = yield tslib.__await(this.client.getAllSearches(options));
                continuationState.continuationToken = currentResponse.nextLink;
                if (currentResponse.entities) {
                    yield yield tslib.__await(currentResponse.entities);
                }
            }
            while (continuationState.continuationToken) {
                const currentResponse = yield tslib.__await(this.client.getAllSearchesNext(continuationState.continuationToken, options));
                continuationState.continuationToken = currentResponse.nextLink;
                if (currentResponse.entities) {
                    yield yield tslib.__await(currentResponse.entities);
                }
            }
        });
    }
    /**
     * @internal
     * @ignore
     * Deals with the iteration of all the available results of listSearches.
     * @param {PageableOptions} [options] Optional parameters for the underlying HTTP request.
     */
    listSearchesAll(options = {}) {
        return tslib.__asyncGenerator(this, arguments, function* listSearchesAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listSearchesPage({}, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const entities = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(entities)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Iterates the searches created by the Azure resource.
     *
     * Example usage:
     * ```ts
     * let client = new PhoneNumberAdministrationClient(credentials);
     * for await (const entity of client.listSearches()) {
     *   console.log("id: ", entity.id);
     * }
     * ```
     * Gets all searches created by the Azure resource.
     * @param {PageableOptions} [options] Optional parameters for the underlying HTTP request.
     */
    listSearches(options = {}) {
        const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-listSearches", options);
        const iter = this.listSearchesAll(options);
        span.end();
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings = {}) => this.listSearchesPage(settings, updatedOptions)
        };
    }
    /**
     * @internal
     * @ignore
     * Deals with the pagination of listReleases.
     * @param {PageSettings} continuationState An object that indicates the position of the paginated request.
     * @param {PageableOptions} [options] Optional parameters for the underlying HTTP request.
     */
    listReleasesPage(continuationState, options = {}) {
        return tslib.__asyncGenerator(this, arguments, function* listReleasesPage_1() {
            if (continuationState.continuationToken == null) {
                const currentResponse = yield tslib.__await(this.client.getAllReleases(options));
                continuationState.continuationToken = currentResponse.nextLink;
                if (currentResponse.entities) {
                    yield yield tslib.__await(currentResponse.entities);
                }
            }
            while (continuationState.continuationToken) {
                const currentResponse = yield tslib.__await(this.client.getAllReleasesNext(continuationState.continuationToken, options));
                continuationState.continuationToken = currentResponse.nextLink;
                if (currentResponse.entities) {
                    yield yield tslib.__await(currentResponse.entities);
                }
            }
        });
    }
    /**
     * @internal
     * @ignore
     * Deals with the iteration of all the available results of listReleases.
     * @param {PageableOptions} [options] Optional parameters for the underlying HTTP request.
     */
    listReleasesAll(options = {}) {
        return tslib.__asyncGenerator(this, arguments, function* listReleasesAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listReleasesPage({}, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const entities = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(entities)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Iterates the releases created by the Azure resource.
     *
     * Example usage:
     * ```ts
     * let client = new PhoneNumberAdministrationClient(credentials);
     * for await (const entity of client.listReleases()) {
     *   console.log("id: ", entity.id);
     * }
     * ```
     * Gets all releases created by the Azure resource.
     * @param {PageableOptions} [options] Optional parameters for the underlying HTTP request.
     */
    listReleases(options = {}) {
        const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-listReleases", options);
        const iter = this.listReleasesAll(options);
        span.end();
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings = {}) => this.listReleasesPage(settings, updatedOptions)
        };
    }
    /**
     * @internal
     * @ignore
     * Deals with the pagination of listSupportedCountries.
     * @param {PageSettings} continuationState An object that indicates the position of the paginated request.
     * @param {ListSupportedCountriesOptions} [options] Optional parameters for the underlying HTTP request.
     */
    listSupportedCountriesPage(continuationState, options = {}) {
        return tslib.__asyncGenerator(this, arguments, function* listSupportedCountriesPage_1() {
            if (continuationState.continuationToken == null) {
                const currentResponse = yield tslib.__await(this.client.getAllSupportedCountries(options));
                continuationState.continuationToken = currentResponse.nextLink;
                if (currentResponse.countries) {
                    yield yield tslib.__await(currentResponse.countries);
                }
            }
            while (continuationState.continuationToken) {
                const currentResponse = yield tslib.__await(this.client.getAllSupportedCountriesNext(continuationState.continuationToken, options));
                continuationState.continuationToken = currentResponse.nextLink;
                if (currentResponse.countries) {
                    yield yield tslib.__await(currentResponse.countries);
                }
            }
        });
    }
    /**
     * @internal
     * @ignore
     * Deals with the iteration of all the available results of listSupportedCountries.
     * @param {ListSupportedCountriesOptions} [options] Optional parameters for the underlying HTTP request.
     */
    listSupportedCountriesAll(options = {}) {
        return tslib.__asyncGenerator(this, arguments, function* listSupportedCountriesAll_1() {
            var e_3, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listSupportedCountriesPage({}, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const countries = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(countries)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Iterates the supported countries.
     *
     * Example usage:
     * ```ts
     * let client = new PhoneNumberAdministrationClient(credentials);
     * for await (const country of client.listSupportedCountries()) {
     *   console.log("country name: ", country.localizedName);
     * }
     * ```
     * @summary List all supported countries.
     * @param {ListSupportedCountriesOptions} [options] The optional parameters.
     */
    listSupportedCountries(options = {}) {
        const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-listAllSupportedCountries", options);
        const iter = this.listSupportedCountriesAll(options);
        span.end();
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings = {}) => this.listSupportedCountriesPage(settings, updatedOptions)
        };
    }
    /**
     * @internal
     * @ignore
     * Deals with the pagination of listPhoneNumbers.
     * @param {PageSettings} continuationState An object that indicates the position of the paginated request.
     * @param {ListPhoneNumbersOptions} [options] Optional parameters for the underlying HTTP request.
     */
    listPhoneNumbersPage(continuationState, options = {}) {
        return tslib.__asyncGenerator(this, arguments, function* listPhoneNumbersPage_1() {
            if (continuationState.continuationToken == null) {
                const currentResponse = yield tslib.__await(this.client.getAllPhoneNumbers(options));
                continuationState.continuationToken = currentResponse.nextLink;
                if (currentResponse.phoneNumbers) {
                    yield yield tslib.__await(currentResponse.phoneNumbers);
                }
            }
            while (continuationState.continuationToken) {
                const currentResponse = yield tslib.__await(this.client.getAllPhoneNumbersNext(continuationState.continuationToken, options));
                continuationState.continuationToken = currentResponse.nextLink;
                if (currentResponse.phoneNumbers) {
                    yield yield tslib.__await(currentResponse.phoneNumbers);
                }
            }
        });
    }
    /**
     * @internal
     * @ignore
     * Deals with the iteration of all the available results of listPhoneNumbers.
     * @param {ListPhoneNumbersOptions} [options] Optional parameters for the underlying HTTP request.
     */
    listPhoneNumbersAll(options = {}) {
        return tslib.__asyncGenerator(this, arguments, function* listPhoneNumbersAll_1() {
            var e_4, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPhoneNumbersPage({}, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const phoneNumbers = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(phoneNumbers)));
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
    }
    /**
     * Iterates the acquired phone numbers.
     *
     * Example usage:
     * ```ts
     * let client = new PhoneNumberAdministrationClient(credentials);
     * for await (const acquired of client.listPhoneNumbers()) {
     *   console.log("phone number: ", acquired.phoneNumber);
     * }
     * ```
     * @summary List all acquired phone numbers.
     * @param {ListPhoneNumbersOptions} [options] The optional parameters.
     */
    listPhoneNumbers(options = {}) {
        const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-listAllPhoneNumbers", options);
        const iter = this.listPhoneNumbersAll(options);
        span.end();
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings = {}) => this.listPhoneNumbersPage(settings, updatedOptions)
        };
    }
    /**
     * @internal
     * @ignore
     * Deals with the pagination of listPhonePlanGroups.
     * @param {PageSettings} continuationState An object that indicates the position of the paginated request.
     * @param countryCode The ISO 3166-2 country code, for example "FR" or "CN".
     * @param {ListPhonePlanGroupsOptions} [options] Optional parameters for the underlying HTTP request.
     */
    listPhonePlanGroupsPage(continuationState, countryCode, options = {}) {
        return tslib.__asyncGenerator(this, arguments, function* listPhonePlanGroupsPage_1() {
            if (continuationState.continuationToken == null) {
                const currentResponse = yield tslib.__await(this.client.getPhonePlanGroups(countryCode, options));
                continuationState.continuationToken = currentResponse.nextLink;
                if (currentResponse.phonePlanGroups) {
                    yield yield tslib.__await(currentResponse.phonePlanGroups);
                }
            }
            while (continuationState.continuationToken) {
                const currentResponse = yield tslib.__await(this.client.getPhonePlanGroupsNext(countryCode, continuationState.continuationToken, options));
                continuationState.continuationToken = currentResponse.nextLink;
                if (currentResponse.phonePlanGroups) {
                    yield yield tslib.__await(currentResponse.phonePlanGroups);
                }
            }
        });
    }
    /**
     * @internal
     * @ignore
     * Deals with the iteration of all the available results of listPhonePlanGroups.
     * @param countryCode The ISO 3166-2 country code, for example "FR" or "CN".
     * @param {ListPlansForCountryOptions} [options] Optional parameters for the underlying HTTP request.
     */
    listPhonePlanGroupsAll(countryCode, options = {}) {
        return tslib.__asyncGenerator(this, arguments, function* listPhonePlanGroupsAll_1() {
            var e_5, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPhonePlanGroupsPage({}, countryCode, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const phonePlanGroups = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(phonePlanGroups)));
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_5) throw e_5.error; }
            }
        });
    }
    /**
     * Iterates the available phone plan groups for a country.
     *
     * Example usage:
     * ```ts
     * let client = new PhoneNumberAdministrationClient(credentials);
     * for await (const phonePlanGroup of client.listPhonePlanGroups("CA")) {
     *   console.log("plan group id: ", phonePlanGroup.phonePlanGroupId);
     * }
     * ```
     * @summary List all available phone plan groups for a country.
     * @param {ListPhonePlanGroupsOptions} [options] The optional parameters.
     */
    listPhonePlanGroups(countryCode, options = {}) {
        const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-listPhonePlanGroups", options);
        const iter = this.listPhonePlanGroupsAll(countryCode, options);
        span.end();
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings = {}) => this.listPhonePlanGroupsPage(settings, countryCode, updatedOptions)
        };
    }
    /**
     * @internal
     * @ignore
     * Deals with the pagination of listPhonePlans.
     * @param {PageSettings} continuationState An object that indicates the position of the paginated request.
     * @param planGroupInfo Information need to search for plans.
     * @param {GetPhonePlansOptions} [options] Optional parameters for the underlying HTTP request.
     */
    listPhonePlansPage(continuationState, planGroupInfo, options = {}) {
        return tslib.__asyncGenerator(this, arguments, function* listPhonePlansPage_1() {
            if (continuationState.continuationToken == null) {
                const currentResponse = yield tslib.__await(this.client.getPhonePlans(planGroupInfo.countryCode, planGroupInfo.phonePlanGroupId, options));
                continuationState.continuationToken = currentResponse.nextLink;
                if (currentResponse.phonePlans) {
                    yield yield tslib.__await(currentResponse.phonePlans);
                }
            }
            while (continuationState.continuationToken) {
                const currentResponse = yield tslib.__await(this.client.getPhonePlansNext(planGroupInfo.countryCode, planGroupInfo.phonePlanGroupId, continuationState.continuationToken, options));
                continuationState.continuationToken = currentResponse.nextLink;
                if (currentResponse.phonePlans) {
                    yield yield tslib.__await(currentResponse.phonePlans);
                }
            }
        });
    }
    /**
     * @internal
     * @ignore
     * Deals with the iteration of all the available results of listPhonePlans.
     * @param planGroupInfo Information need to search for plans.
     * @param {ListPhonePlansOptions} [options] Optional parameters for the underlying HTTP request.
     */
    listPhonePlansAll(planGroupInfo, options = {}) {
        return tslib.__asyncGenerator(this, arguments, function* listPhonePlansAll_1() {
            var e_6, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPhonePlansPage({}, planGroupInfo, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const phonePlans = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(phonePlans)));
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_6) throw e_6.error; }
            }
        });
    }
    /**
     * Iterates the available phone plan for a plan group.
     *
     * Example usage:
     * ```ts
     * let client = new PhoneNumberAdministrationClient(credentials);
     * for await (const phonePlan of client.listPhonePlanGroups(PLAN_GROUP_INFO)) {
     *   console.log("plan id: ", phonePlan.phonePlanId);
     * }
     *
     * Gets all available phone plans for a given plan group.
     * @param planGroupInfo Information need to search for plans.
     * @param options Additional request options.
     */
    listPhonePlans(planGroupInfo, options = {}) {
        const { span, updatedOptions } = createSpan("PhoneNumberAdministrationClient-listPhonePlans", options);
        const iter = this.listPhonePlansAll(planGroupInfo, options);
        span.end();
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings = {}) => this.listPhonePlansPage(settings, planGroupInfo, updatedOptions)
        };
    }
    /**
     * Starts the release of a list of acquired phone numbers.
     *
     * This function returns a Long Running Operation poller that allows you to wait indefinitely until the operation is complete.
     *
     * Example usage:
     * ```ts
     * const client = new PhoneNumberAdministrationClient(CONNECTION_STRING);
     * const releasePoller = await client.beginReleasePhoneNumbers(PHONE_NUMBERS);
     *
     * // Serializing the poller
     * const serialized = releasePoller.toString();
     *
     * // Waiting until it's done
     * const results = await releasePoller.pollUntilDone();
     * console.log(results);
     * ```
     * @param {string[]} phoneNumbers The phone numbers to be released.
     * @param {BeginReleasePhoneNumbersOptions} options Additional request options.
     */
    beginReleasePhoneNumbers(phoneNumbers, options = {}) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const { pollInterval, resumeFrom } = options, requestOptions = tslib.__rest(options, ["pollInterval", "resumeFrom"]);
            const poller = new ReleasePhoneNumbersPoller({
                phoneNumbers,
                client: this.client,
                pollInterval,
                resumeFrom,
                requestOptions
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Starts a search for phone numbers given some constraints such as name or area code.
     * The phone numbers that are found are reserved until you cancel, purchase or the reservation expires.
     *
     * This function returns a Long Running Operation poller that allows you to wait indefinitely until the operation is complete.
     *
     * Example usage:
     * ```ts
     * const client = new PhoneNumberAdministrationClient(CONNECTION_STRING);
     * const reservePoller = await client.beginReservePhoneNumbers(RESERVATION_REQUEST);
     *
     * // Serializing the poller
     * const serialized = reservePoller.toString();
     *
     * // Waiting until it's done
     * const results = await reservePoller.pollUntilDone();
     * console.log(results);
     * ```
     *
     * @param {CreateReservationRequest} reservationRequest Request properties to constraint the search scope.
     * @param {BeginReservePhoneNumbersOptions} options Additional request options.
     */
    beginReservePhoneNumbers(reservationRequest, options = {}) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const { pollInterval, resumeFrom } = options, requestOptions = tslib.__rest(options, ["pollInterval", "resumeFrom"]);
            const poller = new ReservePhoneNumbersPoller({
                reservationRequest,
                client: this.client,
                pollInterval,
                resumeFrom,
                requestOptions
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Starts the purchase of the phone number(s) in the reservation associated with a given id.
     *
     * This function returns a Long Running Operation poller that allows you to wait indefinitely until the operation is complete.
     *
     * Example usage:
     * ```ts
     * const client = new PhoneNumberAdministrationClient(CONNECTION_STRING);
     * const purchasePoller = await client.beginPurchaseReservation(RESERVATION_ID);
     *
     * // Serializing the poller
     * const serialized = purchasePoller.toString();
     *
     * // Waiting until it's done
     * const results = await purchasePoller.pollUntilDone();
     * console.log(results);
     * ```
     *
     * @param {string} reservationId The id of the reservation to purchase.
     * @param {BeginPurchaseReservationOptions} options Additional request options.
     */
    beginPurchaseReservation(reservationId, options = {}) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const { pollInterval, resumeFrom } = options, requestOptions = tslib.__rest(options, ["pollInterval", "resumeFrom"]);
            const poller = new PurchaseReservationPoller({
                reservationId,
                client: this.client,
                pollInterval,
                resumeFrom,
                requestOptions
            });
            yield poller.poll();
            return poller;
        });
    }
}

exports.CommunicationIdentityClient = CommunicationIdentityClient;
exports.PhoneNumberAdministrationClient = PhoneNumberAdministrationClient;
//# sourceMappingURL=index.js.map
